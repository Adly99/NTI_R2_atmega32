
TIMER ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000b08  00000b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800074  00800074  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001440  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b16  00000000  00000000  00002bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  000036e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000831  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa4  00000000  00000000  000042b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 02 	call	0x508	; 0x508 <main>
  8a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialization>:

/* Description : Initialize PINS Directions       */

void DIO_voidInitialization (void)
{
	DDRA = DIO_u8_PORTA_DIRECTIONS;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIRECTIONS;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIRECTIONS;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIRECTIONS;
  9c:	8b ef       	ldi	r24, 0xFB	; 251
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{

	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	e8 f4       	brcc	.+58     	; 0xe0 <DIO_voidSetPinValue+0x3e>
	{
		/*  Check value passed to fuction HIGH    */

		if (Copy_u8PinValue == DIO_u8_HIGH )
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_voidSetPinValue+0x22>
		{
			/*   MAKE pin numer Copy_u8PinNumber HIGH */

			SET_BIT(PORTA , Copy_u8PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinValue+0x16>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinValue+0x12>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		/*  Check value passed to fuction LOW    */
		else 
		{
			/*   MAKE pin numer Copy_u8PinNumber LOW */

			CLEAR_BIT(PORTA, Copy_u8PinNumber);
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPinValue+0x30>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPinValue+0x2c>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
  e0:	98 ef       	ldi	r25, 0xF8	; 248
  e2:	98 0f       	add	r25, r24
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	e8 f4       	brcc	.+58     	; 0x122 <DIO_voidSetPinValue+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT (PORTB , Copy_u8PinNumber);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinValue+0x58>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinValue+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTB , Copy_u8PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinValue+0x72>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinValue+0x6e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 122:	90 ef       	ldi	r25, 0xF0	; 240
 124:	98 0f       	add	r25, r24
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	e8 f4       	brcc	.+58     	; 0x164 <DIO_voidSetPinValue+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_voidSetPinValue+0xa6>
		{
			SET_BIT (PORTC , Copy_u8PinNumber);
 12e:	45 b3       	in	r20, 0x15	; 21
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinValue+0x9a>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinValue+0x96>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTC , Copy_u8PinNumber);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinValue+0xb4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinValue+0xb0>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
		}	
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 164:	88 51       	subi	r24, 0x18	; 24
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <DIO_voidSetPinValue+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_voidSetPinValue+0xe6>
		{
			SET_BIT (PORTD , Copy_u8PinNumber);
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0xda>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0xd6>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTD , Copy_u8PinNumber);
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinValue+0xf4>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinValue+0xf0>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

000001a4 <EXT0_voidInit>:
/****************************************************************/

void EXT0_voidDisable()
{
	
	CLEAR_BIT( GICR , 6 );
 1a4:	8b b7       	in	r24, 0x3b	; 59
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	8b bf       	out	0x3b, r24	; 59
 1aa:	8a b7       	in	r24, 0x3a	; 58
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	8a bf       	out	0x3a, r24	; 58
 1b0:	08 95       	ret

000001b2 <EXT0_voidEnable>:
 1b2:	8b b7       	in	r24, 0x3b	; 59
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	8b bf       	out	0x3b, r24	; 59
 1b8:	08 95       	ret

000001ba <EXT0_voidCallBack>:
/****************************************************************/

void EXT0_voidCallBack(pf addresscpy)
{
	
	x = addresscpy;
 1ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <x+0x1>
 1be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <x>
 1c2:	08 95       	ret

000001c4 <EXT0_voidSetSignalch>:
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
	
	if (SenseCpy == IOC)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <EXT0_voidSetSignalch+0x12>
	{
	 SET_BIT(MCUCR , 0);
 1c8:	85 b7       	in	r24, 0x35	; 53
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 bf       	out	0x35, r24	; 53
	 CLEAR_BIT(MCUCR , 1);
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	85 bf       	out	0x35, r24	; 53
 1d4:	08 95       	ret
	}
	else if (SenseCpy == RISING)
 1d6:	87 30       	cpi	r24, 0x07	; 7
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <EXT0_voidSetSignalch+0x24>
	{
	 SET_BIT(MCUCR , 0);
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	85 bf       	out	0x35, r24	; 53
	 SET_BIT(MCUCR , 1);
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	08 95       	ret
	}
	else if (SenseCpy == FALLING)
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	39 f4       	brne	.+14     	; 0x1fa <EXT0_voidSetSignalch+0x36>
	{
	 CLEAR_BIT(MCUCR , 0);
 1ec:	85 b7       	in	r24, 0x35	; 53
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	85 bf       	out	0x35, r24	; 53
	 SET_BIT(MCUCR , 1);
 1f2:	85 b7       	in	r24, 0x35	; 53
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	85 bf       	out	0x35, r24	; 53
 1f8:	08 95       	ret
	}
	else if (SenseCpy == LOW_LEVEL)
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	31 f4       	brne	.+12     	; 0x20a <EXT0_voidSetSignalch+0x46>
	{
	 CLEAR_BIT(MCUCR , 0);
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	85 bf       	out	0x35, r24	; 53
	 CLEAR_BIT(MCUCR , 1);
 204:	85 b7       	in	r24, 0x35	; 53
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	85 bf       	out	0x35, r24	; 53
 20a:	08 95       	ret

0000020c <__vector_1>:
*/
/** Linker Problem solved */

void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	x();  // EXT0_APP();
 22e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <x>
 232:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <x+0x1>
 236:	09 95       	icall
	
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <GIE_voidEnable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Enable GIE you must	   */
	/**            set Bit Number 7 in SREG REGISTER by 1      */
	/***********************************************************/

	SET_BIT(SREG , 7);
 25a:	8f b7       	in	r24, 0x3f	; 63
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	8f bf       	out	0x3f, r24	; 63
 260:	08 95       	ret

00000262 <vidPutOnBus>:
	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
}

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
	u8 LOC_u8Loop = LCD_DATA_D0_START ;

	DIO_voidSetPinValue( LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 266:	c8 2f       	mov	r28, r24
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	68 2f       	mov	r22, r24
 26c:	61 70       	andi	r22, 0x01	; 1
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 274:	be 01       	movw	r22, r28
 276:	75 95       	asr	r23
 278:	67 95       	ror	r22
 27a:	61 70       	andi	r22, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 282:	be 01       	movw	r22, r28
 284:	75 95       	asr	r23
 286:	67 95       	ror	r22
 288:	75 95       	asr	r23
 28a:	67 95       	ror	r22
 28c:	61 70       	andi	r22, 0x01	; 1
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 294:	be 01       	movw	r22, r28
 296:	75 95       	asr	r23
 298:	67 95       	ror	r22
 29a:	75 95       	asr	r23
 29c:	67 95       	ror	r22
 29e:	75 95       	asr	r23
 2a0:	67 95       	ror	r22
 2a2:	61 70       	andi	r22, 0x01	; 1
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2aa:	be 01       	movw	r22, r28
 2ac:	75 95       	asr	r23
 2ae:	67 95       	ror	r22
 2b0:	75 95       	asr	r23
 2b2:	67 95       	ror	r22
 2b4:	75 95       	asr	r23
 2b6:	67 95       	ror	r22
 2b8:	75 95       	asr	r23
 2ba:	67 95       	ror	r22
 2bc:	61 70       	andi	r22, 0x01	; 1
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2c4:	be 01       	movw	r22, r28
 2c6:	75 95       	asr	r23
 2c8:	67 95       	ror	r22
 2ca:	75 95       	asr	r23
 2cc:	67 95       	ror	r22
 2ce:	75 95       	asr	r23
 2d0:	67 95       	ror	r22
 2d2:	75 95       	asr	r23
 2d4:	67 95       	ror	r22
 2d6:	75 95       	asr	r23
 2d8:	67 95       	ror	r22
 2da:	61 70       	andi	r22, 0x01	; 1
 2dc:	85 e0       	ldi	r24, 0x05	; 5
 2de:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2e2:	be 01       	movw	r22, r28
 2e4:	06 2e       	mov	r0, r22
 2e6:	67 2f       	mov	r22, r23
 2e8:	00 0c       	add	r0, r0
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 0b       	sbc	r23, r23
 2ee:	00 0c       	add	r0, r0
 2f0:	66 1f       	adc	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	61 70       	andi	r22, 0x01	; 1
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 2fc:	cc 0f       	add	r28, r28
 2fe:	cd 2f       	mov	r28, r29
 300:	cc 1f       	adc	r28, r28
 302:	dd 0b       	sbc	r29, r29
 304:	6c 2f       	mov	r22, r28
 306:	61 70       	andi	r22, 0x01	; 1
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* lach  */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_HIGH );
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8c e1       	ldi	r24, 0x1C	; 28
 312:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	83 ef       	ldi	r24, 0xF3	; 243
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <vidPutOnBus+0xb8>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <vidPutOnBus+0xbe>
 320:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	8c e1       	ldi	r24, 0x1C	; 28
 326:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 32a:	83 ef       	ldi	r24, 0xF3	; 243
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <vidPutOnBus+0xcc>
 332:	00 c0       	rjmp	.+0      	; 0x334 <vidPutOnBus+0xd2>
 334:	00 00       	nop
	_delay_ms(2);

}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <LCD_vidSendCmd>:
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );

}

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_LOW );
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	88 e1       	ldi	r24, 0x18	; 24
 344:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	89 e1       	ldi	r24, 0x19	; 25
 34c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 31 01 	call	0x262	; 0x262 <vidPutOnBus>

}
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_HIGH );
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	88 e1       	ldi	r24, 0x18	; 24
 362:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	89 e1       	ldi	r24, 0x19	; 25
 36a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 36e:	8c 2f       	mov	r24, r28
 370:	0e 94 31 01 	call	0x262	; 0x262 <vidPutOnBus>
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <LCD_vidClear>:
}

void LCD_vidClear( void )
{
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 37e:	83 ef       	ldi	r24, 0xF3	; 243
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_vidClear+0xa>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_vidClear+0x10>
 388:	00 00       	nop
 38a:	08 95       	ret

0000038c <LCD_vidInit>:
 38c:	8d e2       	ldi	r24, 0x2D	; 45
 38e:	92 e2       	ldi	r25, 0x22	; 34
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_vidInit+0x4>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_vidInit+0xa>
 396:	00 00       	nop
	/* wait 35 */
	_delay_ms(35);

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 398:	88 e3       	ldi	r24, 0x38	; 56
 39a:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_vidInit+0x16>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_vidInit+0x1c>
 3a8:	00 00       	nop
	/* wait 1 */
	_delay_ms(1);

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3b0:	89 ef       	ldi	r24, 0xF9	; 249
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_vidInit+0x28>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_vidInit+0x2e>
 3ba:	00 00       	nop
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 3bc:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3c6:	83 ef       	ldi	r24, 0xF3	; 243
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_vidInit+0x3e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_vidInit+0x44>
 3d0:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);

	/* latch = 0 */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8c e1       	ldi	r24, 0x1C	; 28
 3d6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3da:	08 95       	ret

000003dc <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 /* switchcase over line */
	if(  u8LineNbCpy == 1 )
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	29 f4       	brne	.+10     	; 0x3ea <LCD_vidGotoXY+0xe>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	86 0f       	add	r24, r22
 3e4:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3e8:	08 95       	ret
			
	}
	
	else if(  u8LineNbCpy == 2 )
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <LCD_vidGotoXY+0x1a>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 3ee:	80 ec       	ldi	r24, 0xC0	; 192
 3f0:	86 0f       	add	r24, r22
 3f2:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
 3f6:	08 95       	ret

000003f8 <LCD_vidWriteString>:
}


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	8c 01       	movw	r16, r24
	u8 Loc_u8Counter = 0 ;
 400:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 404:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		Loc_u8Counter++;		
 408:	cf 5f       	subi	r28, 0xFF	; 255
/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 40a:	f8 01       	movw	r30, r16
 40c:	ec 0f       	add	r30, r28
 40e:	f1 1d       	adc	r31, r1
 410:	80 81       	ld	r24, Z
 412:	81 11       	cpse	r24, r1
 414:	f7 cf       	rjmp	.-18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;		
	}
	

}
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	08 95       	ret

0000041e <TOVF_APP>:
void TOVF_APP (void)
/* Prototype for ISR of TIMER0 OVF */
// void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ;
// void __vector_11 (void)
{
		ovf++;
 41e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <ovf>
 422:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <ovf+0x1>
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <ovf+0x1>
 42c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <ovf>
 430:	08 95       	ret

00000432 <EXTI0_APP>:
// }
void EXTI0_APP (void)
// void __vector_1 (void) __attribute__ ((signal,used, externally_visible));
// void __vector_1 (void)
{
	if (flag == 0)            // put all condition
 432:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 436:	81 11       	cpse	r24, r1
 438:	0d c0       	rjmp	.+26     	; 0x454 <EXTI0_APP+0x22>
	{
		TIMER0_void_setTCNT0(0);   // TCNT0 = 0		
 43a:	0e 94 18 03 	call	0x630	; 0x630 <TIMER0_void_setTCNT0>
		ovf=0;	// starting timer ovf ==  0
 43e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 442:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
		EXT0_voidSetSignalch(FALLING);   // SENSE FALLING
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
		flag = 1 ; 
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
 452:	08 95       	ret
	}
	else if (flag == 1)
 454:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	49 f5       	brne	.+82     	; 0x4ae <EXTI0_APP+0x7c>
		{	ton = (float)( (TCNT0 + (ovf * 256) )    * (float)  ( (float) 1024 / F_CPU ) );  // CALCULATE ton
 45c:	82 b7       	in	r24, 0x32	; 50
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <ovf>
 466:	68 0f       	add	r22, r24
 468:	71 1d       	adc	r23, r1
 46a:	07 2e       	mov	r0, r23
 46c:	00 0c       	add	r0, r0
 46e:	88 0b       	sbc	r24, r24
 470:	99 0b       	sbc	r25, r25
 472:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__floatsisf>
 476:	2d eb       	ldi	r18, 0xBD	; 189
 478:	37 e3       	ldi	r19, 0x37	; 55
 47a:	46 e0       	ldi	r20, 0x06	; 6
 47c:	59 e3       	ldi	r21, 0x39	; 57
 47e:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3>
 482:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <ton>
 486:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <ton+0x1>
 48a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ton+0x2>
 48e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ton+0x3>
			TIMER0_void_setTCNT0(0);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 18 03 	call	0x630	; 0x630 <TIMER0_void_setTCNT0>

			ovf = 0;          // starting timer ovf ==  0
 498:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 49c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
			flag = 2;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
			EXT0_voidSetSignalch(RISING);		
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
 4ac:	08 95       	ret
			}
	else if (flag == 2)
 4ae:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <flag>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	41 f5       	brne	.+80     	; 0x506 <EXTI0_APP+0xd4>
		{
			toff = (float)(   (TCNT0 + (ovf * 256) )    * (float)  (  (float) 1024 / F_CPU) );
 4b6:	82 b7       	in	r24, 0x32	; 50
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <ovf>
 4c0:	68 0f       	add	r22, r24
 4c2:	71 1d       	adc	r23, r1
 4c4:	07 2e       	mov	r0, r23
 4c6:	00 0c       	add	r0, r0
 4c8:	88 0b       	sbc	r24, r24
 4ca:	99 0b       	sbc	r25, r25
 4cc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__floatsisf>
 4d0:	2d eb       	ldi	r18, 0xBD	; 189
 4d2:	37 e3       	ldi	r19, 0x37	; 55
 4d4:	46 e0       	ldi	r20, 0x06	; 6
 4d6:	59 e3       	ldi	r21, 0x39	; 57
 4d8:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3>
 4dc:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <__data_end>
 4e0:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <__data_end+0x1>
 4e4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end+0x2>
 4e8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x3>
			TIMER0_void_setTCNT0(0);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 18 03 	call	0x630	; 0x630 <TIMER0_void_setTCNT0>
			ovf=0;				 // starting timer ovf ==  0
 4f2:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf+0x1>
 4f6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ovf>
			flag = 1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <flag>
			EXT0_voidSetSignalch(FALLING);
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXT0_voidSetSignalch>
 506:	08 95       	ret

00000508 <main>:



int main()
{
	TIMER0_OVERFLOW_void_setCallBack(TOVF_APP);
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	92 e0       	ldi	r25, 0x02	; 2
 50c:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER0_OVERFLOW_void_setCallBack>
	EXT0_voidCallBack(EXTI0_APP);
 510:	89 e1       	ldi	r24, 0x19	; 25
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EXT0_voidCallBack>
	int duty = 0 ;
	int freq = 0 ;
	float f = 0 ;
	DIO_voidInitialization();
 518:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialization>
	EXT0_voidInit();
 51c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <EXT0_voidInit>
	LCD_vidInit();
 520:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_vidInit>

	TIMER0_void_intialization();
 524:	0e 94 14 03 	call	0x628	; 0x628 <TIMER0_void_intialization>

	TIMER0_void_overflowInterruptEnable();
 528:	0e 94 1a 03 	call	0x634	; 0x634 <TIMER0_void_overflowInterruptEnable>

	EXT0_voidEnable();
 52c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EXT0_voidEnable>
	GIE_voidEnable();
 530:	0e 94 2d 01 	call	0x25a	; 0x25a <GIE_voidEnable>
	/*	pre 1024 .. mode CTC "Duty 50%" .. F = fcpu/(pre* counts) = 30.5 HZ	*/
	TCCR2 = 0b00011111;
 534:	8f e1       	ldi	r24, 0x1F	; 31
 536:	85 bd       	out	0x25, r24	; 37
	OCR2 = 127;
 538:	8f e7       	ldi	r24, 0x7F	; 127
 53a:	83 bd       	out	0x23, r24	; 35

	while(1)
	{
		duty = (100 * ton) /( ton + toff);
 53c:	80 90 78 00 	lds	r8, 0x0078	; 0x800078 <ton>
 540:	90 90 79 00 	lds	r9, 0x0079	; 0x800079 <ton+0x1>
 544:	a0 90 7a 00 	lds	r10, 0x007A	; 0x80007a <ton+0x2>
 548:	b0 90 7b 00 	lds	r11, 0x007B	; 0x80007b <ton+0x3>
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	48 ec       	ldi	r20, 0xC8	; 200
 552:	52 e4       	ldi	r21, 0x42	; 66
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3>
 55c:	6b 01       	movw	r12, r22
 55e:	7c 01       	movw	r14, r24
 560:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__data_end>
 564:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__data_end+0x1>
 568:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <__data_end+0x2>
 56c:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <__data_end+0x3>
 570:	c5 01       	movw	r24, r10
 572:	b4 01       	movw	r22, r8
 574:	0e 94 4b 03 	call	0x696	; 0x696 <__addsf3>
 578:	4b 01       	movw	r8, r22
 57a:	5c 01       	movw	r10, r24
 57c:	9b 01       	movw	r18, r22
 57e:	ac 01       	movw	r20, r24
 580:	c7 01       	movw	r24, r14
 582:	b6 01       	movw	r22, r12
 584:	0e 94 b7 03 	call	0x76e	; 0x76e <__divsf3>
 588:	0e 94 29 04 	call	0x852	; 0x852 <__fixsfsi>
 58c:	7b 01       	movw	r14, r22
		f = 1 / (ton + toff); // Tperiod = TON + TOFF
 58e:	a5 01       	movw	r20, r10
 590:	94 01       	movw	r18, r8
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	9f e3       	ldi	r25, 0x3F	; 63
 59a:	0e 94 b7 03 	call	0x76e	; 0x76e <__divsf3>
		freq = (int) f ;
 59e:	0e 94 29 04 	call	0x852	; 0x852 <__fixsfsi>
 5a2:	eb 01       	movw	r28, r22
		LCD_vidSendCmd(0x80);
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_vidSendCmd>
		LCD_vidWriteString((u8 *)"Freq = ");
 5aa:	80 e6       	ldi	r24, 0x60	; 96
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidWriteChar((freq/100)+48);
 5b2:	ce 01       	movw	r24, r28
 5b4:	64 e6       	ldi	r22, 0x64	; 100
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodhi4>
 5bc:	80 e3       	ldi	r24, 0x30	; 48
 5be:	86 0f       	add	r24, r22
 5c0:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(((freq/10)%10)+48);
 5c4:	0a e0       	ldi	r16, 0x0A	; 10
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	ce 01       	movw	r24, r28
 5ca:	b8 01       	movw	r22, r16
 5cc:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodhi4>
 5d0:	c8 2f       	mov	r28, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	b8 01       	movw	r22, r16
 5d6:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodhi4>
 5da:	80 5d       	subi	r24, 0xD0	; 208
 5dc:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar((freq%10)+48);
 5e0:	80 e3       	ldi	r24, 0x30	; 48
 5e2:	8c 0f       	add	r24, r28
 5e4:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteString((u8 *)" HZ");
 5e8:	88 e6       	ldi	r24, 0x68	; 104
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidGotoXY(2 , 0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_vidGotoXY>
		LCD_vidWriteString((u8 *)  "Duty = ");
 5f8:	8c e6       	ldi	r24, 0x6C	; 108
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_vidWriteString>
		LCD_vidWriteChar(( duty / 10 ) + 48);
 600:	c7 01       	movw	r24, r14
 602:	b8 01       	movw	r22, r16
 604:	0e 94 5a 05 	call	0xab4	; 0xab4 <__divmodhi4>
 608:	c8 2f       	mov	r28, r24
 60a:	80 e3       	ldi	r24, 0x30	; 48
 60c:	86 0f       	add	r24, r22
 60e:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(( duty % 10) + 48);
 612:	80 e3       	ldi	r24, 0x30	; 48
 614:	8c 0f       	add	r24, r28
 616:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar(' ');
 61a:	80 e2       	ldi	r24, 0x20	; 32
 61c:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
		LCD_vidWriteChar('%');
 620:	85 e2       	ldi	r24, 0x25	; 37
 622:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_vidWriteChar>
 626:	8a cf       	rjmp	.-236    	; 0x53c <main+0x34>

00000628 <TIMER0_void_intialization>:
	SET_BIT(TIFR, 1);
}

u8 TIMER0_void_getCompareMatchInterruptFlag(void){
	return (GET_BIT(TIFR, 1));
}
 628:	85 e0       	ldi	r24, 0x05	; 5
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	12 be       	out	0x32, r1	; 50
 62e:	08 95       	ret

00000630 <TIMER0_void_setTCNT0>:
 630:	82 bf       	out	0x32, r24	; 50
 632:	08 95       	ret

00000634 <TIMER0_void_overflowInterruptEnable>:
 634:	89 b7       	in	r24, 0x39	; 57
 636:	81 60       	ori	r24, 0x01	; 1
 638:	89 bf       	out	0x39, r24	; 57
 63a:	08 95       	ret

0000063c <TIMER0_OVERFLOW_void_setCallBack>:


void TIMER0_OVERFLOW_void_setCallBack(pf address_cpy){
	GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc = address_cpy;
 63c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc+0x1>
 640:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc>
 644:	08 95       	ret

00000646 <__vector_11>:




void __vector_11 (void) __attribute__ ((signal, used));
void __vector_11 (void){
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
	GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc();
 668:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc>
 66c:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <GLOB_TIMER0_OVERFLOW_ISRLocation_ptrToFunc+0x1>
 670:	09 95       	icall
}
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__subsf3>:
 694:	50 58       	subi	r21, 0x80	; 128

00000696 <__addsf3>:
 696:	bb 27       	eor	r27, r27
 698:	aa 27       	eor	r26, r26
 69a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__addsf3x>
 69e:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
 6a2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
 6a6:	38 f0       	brcs	.+14     	; 0x6b6 <__addsf3+0x20>
 6a8:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
 6ac:	20 f0       	brcs	.+8      	; 0x6b6 <__addsf3+0x20>
 6ae:	39 f4       	brne	.+14     	; 0x6be <__addsf3+0x28>
 6b0:	9f 3f       	cpi	r25, 0xFF	; 255
 6b2:	19 f4       	brne	.+6      	; 0x6ba <__addsf3+0x24>
 6b4:	26 f4       	brtc	.+8      	; 0x6be <__addsf3+0x28>
 6b6:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>
 6ba:	0e f4       	brtc	.+2      	; 0x6be <__addsf3+0x28>
 6bc:	e0 95       	com	r30
 6be:	e7 fb       	bst	r30, 7
 6c0:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>

000006c4 <__addsf3x>:
 6c4:	e9 2f       	mov	r30, r25
 6c6:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
 6ca:	58 f3       	brcs	.-42     	; 0x6a2 <__addsf3+0xc>
 6cc:	ba 17       	cp	r27, r26
 6ce:	62 07       	cpc	r22, r18
 6d0:	73 07       	cpc	r23, r19
 6d2:	84 07       	cpc	r24, r20
 6d4:	95 07       	cpc	r25, r21
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__addsf3x+0x1c>
 6d8:	79 f4       	brne	.+30     	; 0x6f8 <__addsf3x+0x34>
 6da:	a6 f5       	brtc	.+104    	; 0x744 <__addsf3x+0x80>
 6dc:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_zero>
 6e0:	0e f4       	brtc	.+2      	; 0x6e4 <__addsf3x+0x20>
 6e2:	e0 95       	com	r30
 6e4:	0b 2e       	mov	r0, r27
 6e6:	ba 2f       	mov	r27, r26
 6e8:	a0 2d       	mov	r26, r0
 6ea:	0b 01       	movw	r0, r22
 6ec:	b9 01       	movw	r22, r18
 6ee:	90 01       	movw	r18, r0
 6f0:	0c 01       	movw	r0, r24
 6f2:	ca 01       	movw	r24, r20
 6f4:	a0 01       	movw	r20, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	ff 27       	eor	r31, r31
 6fa:	59 1b       	sub	r21, r25
 6fc:	99 f0       	breq	.+38     	; 0x724 <__addsf3x+0x60>
 6fe:	59 3f       	cpi	r21, 0xF9	; 249
 700:	50 f4       	brcc	.+20     	; 0x716 <__addsf3x+0x52>
 702:	50 3e       	cpi	r21, 0xE0	; 224
 704:	68 f1       	brcs	.+90     	; 0x760 <__addsf3x+0x9c>
 706:	1a 16       	cp	r1, r26
 708:	f0 40       	sbci	r31, 0x00	; 0
 70a:	a2 2f       	mov	r26, r18
 70c:	23 2f       	mov	r18, r19
 70e:	34 2f       	mov	r19, r20
 710:	44 27       	eor	r20, r20
 712:	58 5f       	subi	r21, 0xF8	; 248
 714:	f3 cf       	rjmp	.-26     	; 0x6fc <__addsf3x+0x38>
 716:	46 95       	lsr	r20
 718:	37 95       	ror	r19
 71a:	27 95       	ror	r18
 71c:	a7 95       	ror	r26
 71e:	f0 40       	sbci	r31, 0x00	; 0
 720:	53 95       	inc	r21
 722:	c9 f7       	brne	.-14     	; 0x716 <__addsf3x+0x52>
 724:	7e f4       	brtc	.+30     	; 0x744 <__addsf3x+0x80>
 726:	1f 16       	cp	r1, r31
 728:	ba 0b       	sbc	r27, r26
 72a:	62 0b       	sbc	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	ba f0       	brmi	.+46     	; 0x760 <__addsf3x+0x9c>
 732:	91 50       	subi	r25, 0x01	; 1
 734:	a1 f0       	breq	.+40     	; 0x75e <__addsf3x+0x9a>
 736:	ff 0f       	add	r31, r31
 738:	bb 1f       	adc	r27, r27
 73a:	66 1f       	adc	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	c2 f7       	brpl	.-16     	; 0x732 <__addsf3x+0x6e>
 742:	0e c0       	rjmp	.+28     	; 0x760 <__addsf3x+0x9c>
 744:	ba 0f       	add	r27, r26
 746:	62 1f       	adc	r22, r18
 748:	73 1f       	adc	r23, r19
 74a:	84 1f       	adc	r24, r20
 74c:	48 f4       	brcc	.+18     	; 0x760 <__addsf3x+0x9c>
 74e:	87 95       	ror	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	b7 95       	ror	r27
 756:	f7 95       	ror	r31
 758:	9e 3f       	cpi	r25, 0xFE	; 254
 75a:	08 f0       	brcs	.+2      	; 0x75e <__addsf3x+0x9a>
 75c:	b0 cf       	rjmp	.-160    	; 0x6be <__addsf3+0x28>
 75e:	93 95       	inc	r25
 760:	88 0f       	add	r24, r24
 762:	08 f0       	brcs	.+2      	; 0x766 <__addsf3x+0xa2>
 764:	99 27       	eor	r25, r25
 766:	ee 0f       	add	r30, r30
 768:	97 95       	ror	r25
 76a:	87 95       	ror	r24
 76c:	08 95       	ret

0000076e <__divsf3>:
 76e:	0e 94 cb 03 	call	0x796	; 0x796 <__divsf3x>
 772:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
 776:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
 77a:	58 f0       	brcs	.+22     	; 0x792 <__divsf3+0x24>
 77c:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
 780:	40 f0       	brcs	.+16     	; 0x792 <__divsf3+0x24>
 782:	29 f4       	brne	.+10     	; 0x78e <__divsf3+0x20>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	29 f0       	breq	.+10     	; 0x792 <__divsf3+0x24>
 788:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 78c:	51 11       	cpse	r21, r1
 78e:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 792:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>

00000796 <__divsf3x>:
 796:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
 79a:	68 f3       	brcs	.-38     	; 0x776 <__divsf3+0x8>

0000079c <__divsf3_pse>:
 79c:	99 23       	and	r25, r25
 79e:	b1 f3       	breq	.-20     	; 0x78c <__divsf3+0x1e>
 7a0:	55 23       	and	r21, r21
 7a2:	91 f3       	breq	.-28     	; 0x788 <__divsf3+0x1a>
 7a4:	95 1b       	sub	r25, r21
 7a6:	55 0b       	sbc	r21, r21
 7a8:	bb 27       	eor	r27, r27
 7aa:	aa 27       	eor	r26, r26
 7ac:	62 17       	cp	r22, r18
 7ae:	73 07       	cpc	r23, r19
 7b0:	84 07       	cpc	r24, r20
 7b2:	38 f0       	brcs	.+14     	; 0x7c2 <__divsf3_pse+0x26>
 7b4:	9f 5f       	subi	r25, 0xFF	; 255
 7b6:	5f 4f       	sbci	r21, 0xFF	; 255
 7b8:	22 0f       	add	r18, r18
 7ba:	33 1f       	adc	r19, r19
 7bc:	44 1f       	adc	r20, r20
 7be:	aa 1f       	adc	r26, r26
 7c0:	a9 f3       	breq	.-22     	; 0x7ac <__divsf3_pse+0x10>
 7c2:	35 d0       	rcall	.+106    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7c4:	0e 2e       	mov	r0, r30
 7c6:	3a f0       	brmi	.+14     	; 0x7d6 <__divsf3_pse+0x3a>
 7c8:	e0 e8       	ldi	r30, 0x80	; 128
 7ca:	32 d0       	rcall	.+100    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7cc:	91 50       	subi	r25, 0x01	; 1
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	e6 95       	lsr	r30
 7d2:	00 1c       	adc	r0, r0
 7d4:	ca f7       	brpl	.-14     	; 0x7c8 <__divsf3_pse+0x2c>
 7d6:	2b d0       	rcall	.+86     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7d8:	fe 2f       	mov	r31, r30
 7da:	29 d0       	rcall	.+82     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	bb 1f       	adc	r27, r27
 7e4:	26 17       	cp	r18, r22
 7e6:	37 07       	cpc	r19, r23
 7e8:	48 07       	cpc	r20, r24
 7ea:	ab 07       	cpc	r26, r27
 7ec:	b0 e8       	ldi	r27, 0x80	; 128
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <__divsf3_pse+0x56>
 7f0:	bb 0b       	sbc	r27, r27
 7f2:	80 2d       	mov	r24, r0
 7f4:	bf 01       	movw	r22, r30
 7f6:	ff 27       	eor	r31, r31
 7f8:	93 58       	subi	r25, 0x83	; 131
 7fa:	5f 4f       	sbci	r21, 0xFF	; 255
 7fc:	3a f0       	brmi	.+14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7fe:	9e 3f       	cpi	r25, 0xFE	; 254
 800:	51 05       	cpc	r21, r1
 802:	78 f0       	brcs	.+30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 804:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 808:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	e4 f3       	brlt	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	98 3e       	cpi	r25, 0xE8	; 232
 812:	d4 f3       	brlt	.-12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 814:	86 95       	lsr	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	f7 95       	ror	r31
 81e:	9f 5f       	subi	r25, 0xFF	; 255
 820:	c9 f7       	brne	.-14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 822:	88 0f       	add	r24, r24
 824:	91 1d       	adc	r25, r1
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret
 82e:	e1 e0       	ldi	r30, 0x01	; 1
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	62 17       	cp	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	ba 07       	cpc	r27, r26
 840:	20 f0       	brcs	.+8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 842:	62 1b       	sub	r22, r18
 844:	73 0b       	sbc	r23, r19
 846:	84 0b       	sbc	r24, r20
 848:	ba 0b       	sbc	r27, r26
 84a:	ee 1f       	adc	r30, r30
 84c:	88 f7       	brcc	.-30     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 84e:	e0 95       	com	r30
 850:	08 95       	ret

00000852 <__fixsfsi>:
 852:	0e 94 30 04 	call	0x860	; 0x860 <__fixunssfsi>
 856:	68 94       	set
 858:	b1 11       	cpse	r27, r1
 85a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 85e:	08 95       	ret

00000860 <__fixunssfsi>:
 860:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_splitA>
 864:	88 f0       	brcs	.+34     	; 0x888 <__fixunssfsi+0x28>
 866:	9f 57       	subi	r25, 0x7F	; 127
 868:	98 f0       	brcs	.+38     	; 0x890 <__fixunssfsi+0x30>
 86a:	b9 2f       	mov	r27, r25
 86c:	99 27       	eor	r25, r25
 86e:	b7 51       	subi	r27, 0x17	; 23
 870:	b0 f0       	brcs	.+44     	; 0x89e <__fixunssfsi+0x3e>
 872:	e1 f0       	breq	.+56     	; 0x8ac <__fixunssfsi+0x4c>
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	1a f0       	brmi	.+6      	; 0x884 <__fixunssfsi+0x24>
 87e:	ba 95       	dec	r27
 880:	c9 f7       	brne	.-14     	; 0x874 <__fixunssfsi+0x14>
 882:	14 c0       	rjmp	.+40     	; 0x8ac <__fixunssfsi+0x4c>
 884:	b1 30       	cpi	r27, 0x01	; 1
 886:	91 f0       	breq	.+36     	; 0x8ac <__fixunssfsi+0x4c>
 888:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_zero>
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	08 95       	ret
 890:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_zero>
 894:	67 2f       	mov	r22, r23
 896:	78 2f       	mov	r23, r24
 898:	88 27       	eor	r24, r24
 89a:	b8 5f       	subi	r27, 0xF8	; 248
 89c:	39 f0       	breq	.+14     	; 0x8ac <__fixunssfsi+0x4c>
 89e:	b9 3f       	cpi	r27, 0xF9	; 249
 8a0:	cc f3       	brlt	.-14     	; 0x894 <__fixunssfsi+0x34>
 8a2:	86 95       	lsr	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b3 95       	inc	r27
 8aa:	d9 f7       	brne	.-10     	; 0x8a2 <__fixunssfsi+0x42>
 8ac:	3e f4       	brtc	.+14     	; 0x8bc <__fixunssfsi+0x5c>
 8ae:	90 95       	com	r25
 8b0:	80 95       	com	r24
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__floatunsisf>:
 8be:	e8 94       	clt
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__floatsisf+0x12>

000008c2 <__floatsisf>:
 8c2:	97 fb       	bst	r25, 7
 8c4:	3e f4       	brtc	.+14     	; 0x8d4 <__floatsisf+0x12>
 8c6:	90 95       	com	r25
 8c8:	80 95       	com	r24
 8ca:	70 95       	com	r23
 8cc:	61 95       	neg	r22
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	99 23       	and	r25, r25
 8d6:	a9 f0       	breq	.+42     	; 0x902 <__floatsisf+0x40>
 8d8:	f9 2f       	mov	r31, r25
 8da:	96 e9       	ldi	r25, 0x96	; 150
 8dc:	bb 27       	eor	r27, r27
 8de:	93 95       	inc	r25
 8e0:	f6 95       	lsr	r31
 8e2:	87 95       	ror	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b7 95       	ror	r27
 8ea:	f1 11       	cpse	r31, r1
 8ec:	f8 cf       	rjmp	.-16     	; 0x8de <__floatsisf+0x1c>
 8ee:	fa f4       	brpl	.+62     	; 0x92e <__floatsisf+0x6c>
 8f0:	bb 0f       	add	r27, r27
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__floatsisf+0x36>
 8f4:	60 ff       	sbrs	r22, 0
 8f6:	1b c0       	rjmp	.+54     	; 0x92e <__floatsisf+0x6c>
 8f8:	6f 5f       	subi	r22, 0xFF	; 255
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	8f 4f       	sbci	r24, 0xFF	; 255
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	16 c0       	rjmp	.+44     	; 0x92e <__floatsisf+0x6c>
 902:	88 23       	and	r24, r24
 904:	11 f0       	breq	.+4      	; 0x90a <__floatsisf+0x48>
 906:	96 e9       	ldi	r25, 0x96	; 150
 908:	11 c0       	rjmp	.+34     	; 0x92c <__floatsisf+0x6a>
 90a:	77 23       	and	r23, r23
 90c:	21 f0       	breq	.+8      	; 0x916 <__floatsisf+0x54>
 90e:	9e e8       	ldi	r25, 0x8E	; 142
 910:	87 2f       	mov	r24, r23
 912:	76 2f       	mov	r23, r22
 914:	05 c0       	rjmp	.+10     	; 0x920 <__floatsisf+0x5e>
 916:	66 23       	and	r22, r22
 918:	71 f0       	breq	.+28     	; 0x936 <__floatsisf+0x74>
 91a:	96 e8       	ldi	r25, 0x86	; 134
 91c:	86 2f       	mov	r24, r22
 91e:	70 e0       	ldi	r23, 0x00	; 0
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	2a f0       	brmi	.+10     	; 0x92e <__floatsisf+0x6c>
 924:	9a 95       	dec	r25
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	da f7       	brpl	.-10     	; 0x924 <__floatsisf+0x62>
 92e:	88 0f       	add	r24, r24
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	97 f9       	bld	r25, 7
 936:	08 95       	ret

00000938 <__fp_inf>:
 938:	97 f9       	bld	r25, 7
 93a:	9f 67       	ori	r25, 0x7F	; 127
 93c:	80 e8       	ldi	r24, 0x80	; 128
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	08 95       	ret

00000944 <__fp_nan>:
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	80 ec       	ldi	r24, 0xC0	; 192
 948:	08 95       	ret

0000094a <__fp_pscA>:
 94a:	00 24       	eor	r0, r0
 94c:	0a 94       	dec	r0
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	18 06       	cpc	r1, r24
 954:	09 06       	cpc	r0, r25
 956:	08 95       	ret

00000958 <__fp_pscB>:
 958:	00 24       	eor	r0, r0
 95a:	0a 94       	dec	r0
 95c:	12 16       	cp	r1, r18
 95e:	13 06       	cpc	r1, r19
 960:	14 06       	cpc	r1, r20
 962:	05 06       	cpc	r0, r21
 964:	08 95       	ret

00000966 <__fp_round>:
 966:	09 2e       	mov	r0, r25
 968:	03 94       	inc	r0
 96a:	00 0c       	add	r0, r0
 96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0xc>
 96e:	88 23       	and	r24, r24
 970:	52 f0       	brmi	.+20     	; 0x986 <__fp_round+0x20>
 972:	bb 0f       	add	r27, r27
 974:	40 f4       	brcc	.+16     	; 0x986 <__fp_round+0x20>
 976:	bf 2b       	or	r27, r31
 978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0x18>
 97a:	60 ff       	sbrs	r22, 0
 97c:	04 c0       	rjmp	.+8      	; 0x986 <__fp_round+0x20>
 97e:	6f 5f       	subi	r22, 0xFF	; 255
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	8f 4f       	sbci	r24, 0xFF	; 255
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	08 95       	ret

00000988 <__fp_split3>:
 988:	57 fd       	sbrc	r21, 7
 98a:	90 58       	subi	r25, 0x80	; 128
 98c:	44 0f       	add	r20, r20
 98e:	55 1f       	adc	r21, r21
 990:	59 f0       	breq	.+22     	; 0x9a8 <__fp_splitA+0x10>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	71 f0       	breq	.+28     	; 0x9b2 <__fp_splitA+0x1a>
 996:	47 95       	ror	r20

00000998 <__fp_splitA>:
 998:	88 0f       	add	r24, r24
 99a:	97 fb       	bst	r25, 7
 99c:	99 1f       	adc	r25, r25
 99e:	61 f0       	breq	.+24     	; 0x9b8 <__fp_splitA+0x20>
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	79 f0       	breq	.+30     	; 0x9c2 <__fp_splitA+0x2a>
 9a4:	87 95       	ror	r24
 9a6:	08 95       	ret
 9a8:	12 16       	cp	r1, r18
 9aa:	13 06       	cpc	r1, r19
 9ac:	14 06       	cpc	r1, r20
 9ae:	55 1f       	adc	r21, r21
 9b0:	f2 cf       	rjmp	.-28     	; 0x996 <__fp_split3+0xe>
 9b2:	46 95       	lsr	r20
 9b4:	f1 df       	rcall	.-30     	; 0x998 <__fp_splitA>
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__fp_splitA+0x30>
 9b8:	16 16       	cp	r1, r22
 9ba:	17 06       	cpc	r1, r23
 9bc:	18 06       	cpc	r1, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	f1 cf       	rjmp	.-30     	; 0x9a4 <__fp_splitA+0xc>
 9c2:	86 95       	lsr	r24
 9c4:	71 05       	cpc	r23, r1
 9c6:	61 05       	cpc	r22, r1
 9c8:	08 94       	sec
 9ca:	08 95       	ret

000009cc <__fp_zero>:
 9cc:	e8 94       	clt

000009ce <__fp_szero>:
 9ce:	bb 27       	eor	r27, r27
 9d0:	66 27       	eor	r22, r22
 9d2:	77 27       	eor	r23, r23
 9d4:	cb 01       	movw	r24, r22
 9d6:	97 f9       	bld	r25, 7
 9d8:	08 95       	ret

000009da <__mulsf3>:
 9da:	0e 94 00 05 	call	0xa00	; 0xa00 <__mulsf3x>
 9de:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
 9e2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
 9e6:	38 f0       	brcs	.+14     	; 0x9f6 <__mulsf3+0x1c>
 9e8:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
 9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__mulsf3+0x1c>
 9ee:	95 23       	and	r25, r21
 9f0:	11 f0       	breq	.+4      	; 0x9f6 <__mulsf3+0x1c>
 9f2:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 9f6:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>
 9fa:	11 24       	eor	r1, r1
 9fc:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>

00000a00 <__mulsf3x>:
 a00:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
 a04:	70 f3       	brcs	.-36     	; 0x9e2 <__mulsf3+0x8>

00000a06 <__mulsf3_pse>:
 a06:	95 9f       	mul	r25, r21
 a08:	c1 f3       	breq	.-16     	; 0x9fa <__mulsf3+0x20>
 a0a:	95 0f       	add	r25, r21
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	55 1f       	adc	r21, r21
 a10:	62 9f       	mul	r22, r18
 a12:	f0 01       	movw	r30, r0
 a14:	72 9f       	mul	r23, r18
 a16:	bb 27       	eor	r27, r27
 a18:	f0 0d       	add	r31, r0
 a1a:	b1 1d       	adc	r27, r1
 a1c:	63 9f       	mul	r22, r19
 a1e:	aa 27       	eor	r26, r26
 a20:	f0 0d       	add	r31, r0
 a22:	b1 1d       	adc	r27, r1
 a24:	aa 1f       	adc	r26, r26
 a26:	64 9f       	mul	r22, r20
 a28:	66 27       	eor	r22, r22
 a2a:	b0 0d       	add	r27, r0
 a2c:	a1 1d       	adc	r26, r1
 a2e:	66 1f       	adc	r22, r22
 a30:	82 9f       	mul	r24, r18
 a32:	22 27       	eor	r18, r18
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	62 1f       	adc	r22, r18
 a3a:	73 9f       	mul	r23, r19
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	62 1f       	adc	r22, r18
 a42:	83 9f       	mul	r24, r19
 a44:	a0 0d       	add	r26, r0
 a46:	61 1d       	adc	r22, r1
 a48:	22 1f       	adc	r18, r18
 a4a:	74 9f       	mul	r23, r20
 a4c:	33 27       	eor	r19, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	23 1f       	adc	r18, r19
 a54:	84 9f       	mul	r24, r20
 a56:	60 0d       	add	r22, r0
 a58:	21 1d       	adc	r18, r1
 a5a:	82 2f       	mov	r24, r18
 a5c:	76 2f       	mov	r23, r22
 a5e:	6a 2f       	mov	r22, r26
 a60:	11 24       	eor	r1, r1
 a62:	9f 57       	subi	r25, 0x7F	; 127
 a64:	50 40       	sbci	r21, 0x00	; 0
 a66:	9a f0       	brmi	.+38     	; 0xa8e <__mulsf3_pse+0x88>
 a68:	f1 f0       	breq	.+60     	; 0xaa6 <__mulsf3_pse+0xa0>
 a6a:	88 23       	and	r24, r24
 a6c:	4a f0       	brmi	.+18     	; 0xa80 <__mulsf3_pse+0x7a>
 a6e:	ee 0f       	add	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	bb 1f       	adc	r27, r27
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	a9 f7       	brne	.-22     	; 0xa6a <__mulsf3_pse+0x64>
 a80:	9e 3f       	cpi	r25, 0xFE	; 254
 a82:	51 05       	cpc	r21, r1
 a84:	80 f0       	brcs	.+32     	; 0xaa6 <__mulsf3_pse+0xa0>
 a86:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 a8a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 a8e:	5f 3f       	cpi	r21, 0xFF	; 255
 a90:	e4 f3       	brlt	.-8      	; 0xa8a <__mulsf3_pse+0x84>
 a92:	98 3e       	cpi	r25, 0xE8	; 232
 a94:	d4 f3       	brlt	.-12     	; 0xa8a <__mulsf3_pse+0x84>
 a96:	86 95       	lsr	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b7 95       	ror	r27
 a9e:	f7 95       	ror	r31
 aa0:	e7 95       	ror	r30
 aa2:	9f 5f       	subi	r25, 0xFF	; 255
 aa4:	c1 f7       	brne	.-16     	; 0xa96 <__mulsf3_pse+0x90>
 aa6:	fe 2b       	or	r31, r30
 aa8:	88 0f       	add	r24, r24
 aaa:	91 1d       	adc	r25, r1
 aac:	96 95       	lsr	r25
 aae:	87 95       	ror	r24
 ab0:	97 f9       	bld	r25, 7
 ab2:	08 95       	ret

00000ab4 <__divmodhi4>:
 ab4:	97 fb       	bst	r25, 7
 ab6:	07 2e       	mov	r0, r23
 ab8:	16 f4       	brtc	.+4      	; 0xabe <__divmodhi4+0xa>
 aba:	00 94       	com	r0
 abc:	07 d0       	rcall	.+14     	; 0xacc <__divmodhi4_neg1>
 abe:	77 fd       	sbrc	r23, 7
 ac0:	09 d0       	rcall	.+18     	; 0xad4 <__divmodhi4_neg2>
 ac2:	0e 94 6e 05 	call	0xadc	; 0xadc <__udivmodhi4>
 ac6:	07 fc       	sbrc	r0, 7
 ac8:	05 d0       	rcall	.+10     	; 0xad4 <__divmodhi4_neg2>
 aca:	3e f4       	brtc	.+14     	; 0xada <__divmodhi4_exit>

00000acc <__divmodhi4_neg1>:
 acc:	90 95       	com	r25
 ace:	81 95       	neg	r24
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	08 95       	ret

00000ad4 <__divmodhi4_neg2>:
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255

00000ada <__divmodhi4_exit>:
 ada:	08 95       	ret

00000adc <__udivmodhi4>:
 adc:	aa 1b       	sub	r26, r26
 ade:	bb 1b       	sub	r27, r27
 ae0:	51 e1       	ldi	r21, 0x11	; 17
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <__udivmodhi4_ep>

00000ae4 <__udivmodhi4_loop>:
 ae4:	aa 1f       	adc	r26, r26
 ae6:	bb 1f       	adc	r27, r27
 ae8:	a6 17       	cp	r26, r22
 aea:	b7 07       	cpc	r27, r23
 aec:	10 f0       	brcs	.+4      	; 0xaf2 <__udivmodhi4_ep>
 aee:	a6 1b       	sub	r26, r22
 af0:	b7 0b       	sbc	r27, r23

00000af2 <__udivmodhi4_ep>:
 af2:	88 1f       	adc	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	5a 95       	dec	r21
 af8:	a9 f7       	brne	.-22     	; 0xae4 <__udivmodhi4_loop>
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	bc 01       	movw	r22, r24
 b00:	cd 01       	movw	r24, r26
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
