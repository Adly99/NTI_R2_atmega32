
TIMER ICU HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000a34  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800076  00800076  00000ade  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126c  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ff  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ab  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000755  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c95  00000000  00000000  00003c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000048e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_10>
  2c:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  8a:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialization>:

/* Description : Initialize PINS Directions       */

void DIO_voidInitialization (void)
{
	DDRA = DIO_u8_PORTA_DIRECTIONS;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIRECTIONS;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_u8_PORTC_DIRECTIONS;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_u8_PORTD_DIRECTIONS;
  9c:	8f eb       	ldi	r24, 0xBF	; 191
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PinValue)
{

	/*   FIND PORT A PINS                          */
	if (Copy_u8PinNumber >= DIO_u8_PORTA_START && Copy_u8PinNumber <= DIO_u8_PORTA_END)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	e8 f4       	brcc	.+58     	; 0xe0 <DIO_voidSetPinValue+0x3e>
	{
		/*  Check value passed to fuction HIGH    */

		if (Copy_u8PinValue == DIO_u8_HIGH )
  a6:	61 30       	cpi	r22, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_voidSetPinValue+0x22>
		{
			/*   MAKE pin numer Copy_u8PinNumber HIGH */

			SET_BIT(PORTA , Copy_u8PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinValue+0x16>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinValue+0x12>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		/*  Check value passed to fuction LOW    */
		else 
		{
			/*   MAKE pin numer Copy_u8PinNumber LOW */

			CLEAR_BIT(PORTA, Copy_u8PinNumber);
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_voidSetPinValue+0x30>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_voidSetPinValue+0x2c>
  d6:	cb 01       	movw	r24, r22
  d8:	80 95       	com	r24
  da:	84 23       	and	r24, r20
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	08 95       	ret
		}

	}
	/*   FIND PORT B PINS                          */
	else if (Copy_u8PinNumber >= DIO_u8_PORTB_START && Copy_u8PinNumber <= DIO_u8_PORTB_END)
  e0:	98 ef       	ldi	r25, 0xF8	; 248
  e2:	98 0f       	add	r25, r24
  e4:	98 30       	cpi	r25, 0x08	; 8
  e6:	e8 f4       	brcc	.+58     	; 0x122 <DIO_voidSetPinValue+0x80>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - DIO_u8_PORTA_SIZE ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_voidSetPinValue+0x64>
		{
			SET_BIT (PORTB , Copy_u8PinNumber);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinValue+0x58>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinValue+0x54>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTB , Copy_u8PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinValue+0x72>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinValue+0x6e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}

	}
	/*   FIND PORT C PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTC_START &&  Copy_u8PinNumber <= DIO_u8_PORTC_END)
 122:	90 ef       	ldi	r25, 0xF0	; 240
 124:	98 0f       	add	r25, r24
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	e8 f4       	brcc	.+58     	; 0x164 <DIO_voidSetPinValue+0xc2>
	{
		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <DIO_voidSetPinValue+0xa6>
		{
			SET_BIT (PORTC , Copy_u8PinNumber);
 12e:	45 b3       	in	r20, 0x15	; 21
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinValue+0x9a>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinValue+0x96>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTC , Copy_u8PinNumber);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinValue+0xb4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinValue+0xb0>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
		}	
	}
	/*   FIND PORT D PINS                          */
	else if(Copy_u8PinNumber >= DIO_u8_PORTD_START &&  Copy_u8PinNumber <= DIO_u8_PORTD_END)
 164:	88 51       	subi	r24, 0x18	; 24
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	e0 f4       	brcc	.+56     	; 0x1a2 <DIO_voidSetPinValue+0x100>
	{

		Copy_u8PinNumber = Copy_u8PinNumber - ( DIO_u8_PORTA_SIZE + DIO_u8_PORTB_SIZE + DIO_u8_PORTC_SIZE ) ; 

		if (Copy_u8PinValue == DIO_u8_HIGH )
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_voidSetPinValue+0xe6>
		{
			SET_BIT (PORTD , Copy_u8PinNumber);
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0xda>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0xd6>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
		}
		else 
		{
			CLEAR_BIT(PORTD , Copy_u8PinNumber);
 188:	42 b3       	in	r20, 0x12	; 18
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinValue+0xf4>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinValue+0xf0>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	08 95       	ret

000001a4 <GIE_voidEnable>:
	/***********************************************************/	
	/** !comment : From Data Sheet : To Enable GIE you must	   */
	/**            set Bit Number 7 in SREG REGISTER by 1      */
	/***********************************************************/

	SET_BIT(SREG , 7);
 1a4:	8f b7       	in	r24, 0x3f	; 63
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	8f bf       	out	0x3f, r24	; 63
 1aa:	08 95       	ret

000001ac <vidPutOnBus>:
	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
}

static void vidPutOnBus( u8 u8CmdDataCpy )
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	u8 LOC_u8Loop = LCD_DATA_D0_START ;

	DIO_voidSetPinValue( LCD_u8DATA_0 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 1b0:	c8 2f       	mov	r28, r24
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	68 2f       	mov	r22, r24
 1b6:	61 70       	andi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_1 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 1be:	be 01       	movw	r22, r28
 1c0:	75 95       	asr	r23
 1c2:	67 95       	ror	r22
 1c4:	61 70       	andi	r22, 0x01	; 1
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_2 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 1cc:	be 01       	movw	r22, r28
 1ce:	75 95       	asr	r23
 1d0:	67 95       	ror	r22
 1d2:	75 95       	asr	r23
 1d4:	67 95       	ror	r22
 1d6:	61 70       	andi	r22, 0x01	; 1
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_3 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 1de:	be 01       	movw	r22, r28
 1e0:	75 95       	asr	r23
 1e2:	67 95       	ror	r22
 1e4:	75 95       	asr	r23
 1e6:	67 95       	ror	r22
 1e8:	75 95       	asr	r23
 1ea:	67 95       	ror	r22
 1ec:	61 70       	andi	r22, 0x01	; 1
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_4 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 1f4:	be 01       	movw	r22, r28
 1f6:	75 95       	asr	r23
 1f8:	67 95       	ror	r22
 1fa:	75 95       	asr	r23
 1fc:	67 95       	ror	r22
 1fe:	75 95       	asr	r23
 200:	67 95       	ror	r22
 202:	75 95       	asr	r23
 204:	67 95       	ror	r22
 206:	61 70       	andi	r22, 0x01	; 1
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_5 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 20e:	be 01       	movw	r22, r28
 210:	75 95       	asr	r23
 212:	67 95       	ror	r22
 214:	75 95       	asr	r23
 216:	67 95       	ror	r22
 218:	75 95       	asr	r23
 21a:	67 95       	ror	r22
 21c:	75 95       	asr	r23
 21e:	67 95       	ror	r22
 220:	75 95       	asr	r23
 222:	67 95       	ror	r22
 224:	61 70       	andi	r22, 0x01	; 1
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_6 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 22c:	be 01       	movw	r22, r28
 22e:	06 2e       	mov	r0, r22
 230:	67 2f       	mov	r22, r23
 232:	00 0c       	add	r0, r0
 234:	66 1f       	adc	r22, r22
 236:	77 0b       	sbc	r23, r23
 238:	00 0c       	add	r0, r0
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	61 70       	andi	r22, 0x01	; 1
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( LCD_u8DATA_7 , GET_BIT(u8CmdDataCpy , LOC_u8Loop++ ));
 246:	cc 0f       	add	r28, r28
 248:	cd 2f       	mov	r28, r29
 24a:	cc 1f       	adc	r28, r28
 24c:	dd 0b       	sbc	r29, r29
 24e:	6c 2f       	mov	r22, r28
 250:	61 70       	andi	r22, 0x01	; 1
 252:	87 e0       	ldi	r24, 0x07	; 7
 254:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* lach  */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_HIGH );
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8a e1       	ldi	r24, 0x1A	; 26
 25c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	83 ef       	ldi	r24, 0xF3	; 243
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <vidPutOnBus+0xb8>
 268:	00 c0       	rjmp	.+0      	; 0x26a <vidPutOnBus+0xbe>
 26a:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	8a e1       	ldi	r24, 0x1A	; 26
 270:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 274:	83 ef       	ldi	r24, 0xF3	; 243
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <vidPutOnBus+0xcc>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <vidPutOnBus+0xd2>
 27e:	00 00       	nop
	_delay_ms(2);

}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <LCD_vidSendCmd>:
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );

}

void LCD_vidSendCmd( u8 u8CmdCpy )
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
	/** to send command  ( RS = 0 and R/W = 0 ) =====> (write instruction) */

	/* RS  0 CMD */  
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_LOW );
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	89 e1       	ldi	r24, 0x19	; 25
 296:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CmdCpy);
 29a:	8c 2f       	mov	r24, r28
 29c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vidPutOnBus>

}
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <LCD_vidWriteChar>:

void LCD_vidWriteChar( u8 u8CharCpy )
{
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
	/** to write command   ( RS = 1 and R/W = 0 ) =====> (write to DR Reg) */

	/* RS  1 CMD */
	DIO_voidSetPinValue( LCD_u8RS , DIO_u8_HIGH );
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	88 e1       	ldi	r24, 0x18	; 24
 2ac:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	/* write 0 CMD*/
	DIO_voidSetPinValue( LCD_u8RW , DIO_u8_LOW );
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	89 e1       	ldi	r24, 0x19	; 25
 2b4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>

	/* take data pass data bu */
	vidPutOnBus(u8CharCpy);
 2b8:	8c 2f       	mov	r24, r28
 2ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vidPutOnBus>
}
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <LCD_vidClear>:
}

void LCD_vidClear( void )
{
	/*  function set (Clear  Display) */
	LCD_vidSendCmd(0b00000001);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 2c8:	83 ef       	ldi	r24, 0xF3	; 243
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_vidClear+0xa>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_vidClear+0x10>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <LCD_vidInit>:
 2d6:	8d e2       	ldi	r24, 0x2D	; 45
 2d8:	92 e2       	ldi	r25, 0x22	; 34
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_vidInit+0x4>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_vidInit+0xa>
 2e0:	00 00       	nop
	/* wait 35 */
	_delay_ms(35);

	/*  function set */

	LCD_vidSendCmd(0b00111000);
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 2e8:	89 ef       	ldi	r24, 0xF9	; 249
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_vidInit+0x16>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_vidInit+0x1c>
 2f2:	00 00       	nop
	/* wait 1 */
	_delay_ms(1);

	/*  function set (on/off) */
	LCD_vidSendCmd(0b00001100);
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 2fa:	89 ef       	ldi	r24, 0xF9	; 249
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_vidInit+0x28>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_vidInit+0x2e>
 304:	00 00       	nop
	/*LCD_vidSendCmd(0b00000001);*/
	/*	 wait 2                  */
	/*_delay_ms(2);	             */
	/*****************************/

	LCD_vidClear();
 306:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_vidClear>

	/*  function set (Entry mode set - cursor increase or decrease ) */
	LCD_vidSendCmd(0b00000110);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 310:	83 ef       	ldi	r24, 0xF3	; 243
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_vidInit+0x3e>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_vidInit+0x44>
 31a:	00 00       	nop
	/* wait 2 */
	_delay_ms(2);

	/* latch = 0 */
	DIO_voidSetPinValue( LCD_u8EN , DIO_u8_LOW );
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8a e1       	ldi	r24, 0x1A	; 26
 320:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 324:	08 95       	ret

00000326 <LCD_vidGotoXY>:


void LCD_vidGotoXY( u8 u8LineNbCpy , u8 u8CharNbCpy )
{
 /* switchcase over line */
	if(  u8LineNbCpy == 1 )
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	29 f4       	brne	.+10     	; 0x334 <LCD_vidGotoXY+0xe>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_FIRST_LINE + u8CharNbCpy) );
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	86 0f       	add	r24, r22
 32e:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 332:	08 95       	ret
			
	}
	
	else if( u8LineNbCpy == 2 )
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	21 f4       	brne	.+8      	; 0x340 <LCD_vidGotoXY+0x1a>
	{
		/*  function set (Line1 position " x ") */
		LCD_vidSendCmd( (LCD_BEGINNING_SECOND_LINE + u8CharNbCpy) );
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	86 0f       	add	r24, r22
 33c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_vidSendCmd>
 340:	08 95       	ret

00000342 <LCD_vidWriteString>:
}


/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	8c 01       	movw	r16, r24
	u8 Loc_u8Counter = 0 ;
 34a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 34c:	03 c0       	rjmp	.+6      	; 0x354 <LCD_vidWriteString+0x12>
	{
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
 34e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_vidWriteChar>
		Loc_u8Counter++;		
 352:	cf 5f       	subi	r28, 0xFF	; 255
/* warnning avoid (u8*)"ahmed" */
void LCD_vidWriteString( u8 * pu8StringCpy )
{
	u8 Loc_u8Counter = 0 ;
	
	while(pu8StringCpy[Loc_u8Counter] !='\0')
 354:	f8 01       	movw	r30, r16
 356:	ec 0f       	add	r30, r28
 358:	f1 1d       	adc	r31, r1
 35a:	80 81       	ld	r24, Z
 35c:	81 11       	cpse	r24, r1
 35e:	f7 cf       	rjmp	.-18     	; 0x34e <LCD_vidWriteString+0xc>
		LCD_vidWriteChar(pu8StringCpy[Loc_u8Counter]);
		Loc_u8Counter++;		
	}
	

}
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <Private_u16Power>:
}

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	07 c0       	rjmp	.+14     	; 0x37e <Private_u16Power+0x16>
	{
		Local_u16Result*=Copy_u8Op1;
 370:	a9 01       	movw	r20, r18
 372:	84 9f       	mul	r24, r20
 374:	90 01       	movw	r18, r0
 376:	85 9f       	mul	r24, r21
 378:	30 0d       	add	r19, r0
 37a:	11 24       	eor	r1, r1

u16 Private_u16Power(u8 Copy_u8Op1, u8 Copy_u8Op2)
{
	u8 Local_u8Counter;
	u16 Local_u16Result=1;
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8Op2;Local_u8Counter++)
 37c:	9f 5f       	subi	r25, 0xFF	; 255
 37e:	96 17       	cp	r25, r22
 380:	b8 f3       	brcs	.-18     	; 0x370 <Private_u16Power+0x8>
	{
		Local_u16Result*=Copy_u8Op1;
	}
	return Local_u16Result;
}
 382:	c9 01       	movw	r24, r18
 384:	08 95       	ret

00000386 <LCD_u8WriteINT>:
Outputs: Error state -> 0 No Error
					 -> 1 Error
 */

u8 LCD_u8WriteINT(u16 Copy_u16NB)
{
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	7c 01       	movw	r14, r24
	u8 Local_u8Error=0;

	if(Copy_u16NB==0)
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	89 f4       	brne	.+34     	; 0x3be <LCD_u8WriteINT+0x38>
	{
		LCD_vidWriteChar(48);
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_vidWriteChar>
 3a2:	2f c0       	rjmp	.+94     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
		{
			Local_u8Digits++; //Increment no of digits by one
 3a4:	df 5f       	subi	r29, 0xFF	; 255

			Local_u16CopyOfNB/=10; //get rid of the most right digit
 3a6:	ad ec       	ldi	r26, 0xCD	; 205
 3a8:	bc ec       	ldi	r27, 0xCC	; 204
 3aa:	0e 94 09 05 	call	0xa12	; 0xa12 <__umulhisi3>
 3ae:	9c 01       	movw	r18, r24
 3b0:	36 95       	lsr	r19
 3b2:	27 95       	ror	r18
 3b4:	36 95       	lsr	r19
 3b6:	27 95       	ror	r18
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <LCD_u8WriteINT+0x3c>
 3be:	9c 01       	movw	r18, r24
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		u8 Local_u8Digits=0,Local_u8Counter;
		u16 Local_u16CopyOfNB=Copy_u16NB;

		/*		Get the number of digits of the Number*/
		while(Local_u16CopyOfNB !=0)
 3c2:	21 15       	cp	r18, r1
 3c4:	31 05       	cpc	r19, r1
 3c6:	71 f7       	brne	.-36     	; 0x3a4 <LCD_u8WriteINT+0x1e>
 3c8:	ce 2c       	mov	r12, r14
 3ca:	df 2c       	mov	r13, r15
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
 3ce:	17 c0       	rjmp	.+46     	; 0x3fe <LCD_u8WriteINT+0x78>

		/*		Loop on the number and print every single digit alone each iteration*/
		for(Local_u8Counter=0;Local_u8Counter<Local_u8Digits;Local_u8Counter++)
		{
			/*Get the most left digit*/
			Local_u16CopyOfNB/=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 3d0:	6d 2f       	mov	r22, r29
 3d2:	6c 1b       	sub	r22, r28
 3d4:	61 50       	subi	r22, 0x01	; 1
 3d6:	8a e0       	ldi	r24, 0x0A	; 10
 3d8:	0e 94 b4 01 	call	0x368	; 0x368 <Private_u16Power>
 3dc:	8c 01       	movw	r16, r24
 3de:	8c 2d       	mov	r24, r12
 3e0:	9d 2d       	mov	r25, r13
 3e2:	b8 01       	movw	r22, r16
 3e4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodhi4>

			/*Print the most left digit*/
			LCD_vidWriteChar(48+Local_u16CopyOfNB);
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	86 0f       	add	r24, r22
 3ec:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_vidWriteChar>

			/*Load the original number*/
			Local_u16CopyOfNB=Copy_u16NB;

			/*Get rid of the left most digit*/
			Local_u16CopyOfNB%=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
 3f0:	c7 01       	movw	r24, r14
 3f2:	b8 01       	movw	r22, r16
 3f4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodhi4>
 3f8:	c8 2e       	mov	r12, r24
 3fa:	d9 2e       	mov	r13, r25
		}

		Local_u16CopyOfNB=Copy_u16NB;

		/*		Loop on the number and print every single digit alone each iteration*/
		for(Local_u8Counter=0;Local_u8Counter<Local_u8Digits;Local_u8Counter++)
 3fc:	cf 5f       	subi	r28, 0xFF	; 255
 3fe:	cd 17       	cp	r28, r29
 400:	38 f3       	brcs	.-50     	; 0x3d0 <LCD_u8WriteINT+0x4a>
			/*Get rid of the left most digit*/
			Local_u16CopyOfNB%=Private_u16Power(10,Local_u8Digits-Local_u8Counter-1);
		}
	}
	return Local_u8Error;
}
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	08 95       	ret

00000416 <main>:
	u16 u16Duty_cycle ;
	u16 u16Period;
	u16 u16Onperiod;
	u16 u16Freq = 0;

	DIO_voidInitialization();
 416:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInitialization>

	LCD_vidInit();
 41a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_vidInit>

	TIMER0_void_Init();
 41e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TIMER0_void_Init>
	TIMER0_void_SetCompareVal(127); /*	Duty 50% .. Freq = fcpu/(pre * counts)= (8000000 /8*256) */
 422:	8f e7       	ldi	r24, 0x7F	; 127
 424:	0e 94 09 03 	call	0x612	; 0x612 <TIMER0_void_SetCompareVal>
	// F = 3906.25 HZ
	///init TIMER1
	/*Normal Mode .. Pre = 1024 .. enable ICU .. Rissing Edge	*/
	TCCR1A = 0x00;
 428:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b01000010;
 42a:	82 e4       	ldi	r24, 0x42	; 66
 42c:	8e bd       	out	0x2e, r24	; 46

	TCNT1H = 0;
 42e:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 430:	1c bc       	out	0x2c, r1	; 44

    GIE_voidEnable();
 432:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <GIE_voidEnable>

	SET_BIT(TIMSK,5);	//enable ICU INT
 436:	89 b7       	in	r24, 0x39	; 57
 438:	80 62       	ori	r24, 0x20	; 32
 43a:	89 bf       	out	0x39, r24	; 57
//// end init

	while(u8flag!=3);                               // read only once
 43c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	e1 f7       	brne	.-8      	; 0x43c <main+0x26>
		//LCD_go_to_xy(2,0);
		//lcd_write_char('a');

		u16Period = u16temp2 - u16temp1;             // t2 - t1
 444:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <u16temp2>
 448:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <u16temp2+0x1>
 44c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <u16temp1>
 450:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <u16temp1+0x1>
 454:	28 1b       	sub	r18, r24
 456:	39 0b       	sbc	r19, r25

		u16Onperiod = u16temp3 - u16temp2;            // t3 - t2
 458:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <u16temp3>
 45c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <u16temp3+0x1>
 460:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16temp2>
 464:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u16temp2+0x1>
 468:	48 1b       	sub	r20, r24
 46a:	59 0b       	sbc	r21, r25

		u16Duty_cycle = ((u16Onperiod*100)/u16Period);
 46c:	64 e6       	ldi	r22, 0x64	; 100
 46e:	64 9f       	mul	r22, r20
 470:	c0 01       	movw	r24, r0
 472:	65 9f       	mul	r22, r21
 474:	90 0d       	add	r25, r0
 476:	11 24       	eor	r1, r1
 478:	b9 01       	movw	r22, r18
 47a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodhi4>
 47e:	eb 01       	movw	r28, r22

		u16Freq = (1 / ( u16Period * f32TimerClock ));
 480:	b9 01       	movw	r22, r18
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__floatunsisf>
 48a:	2d eb       	ldi	r18, 0xBD	; 189
 48c:	37 e3       	ldi	r19, 0x37	; 55
 48e:	46 e8       	ldi	r20, 0x86	; 134
 490:	55 e3       	ldi	r21, 0x35	; 53
 492:	0e 94 88 04 	call	0x910	; 0x910 <__mulsf3>
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	9f e3       	ldi	r25, 0x3F	; 63
 4a2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__divsf3>
 4a6:	0e 94 cb 03 	call	0x796	; 0x796 <__fixunssfsi>
 4aa:	6b 01       	movw	r12, r22
 4ac:	7c 01       	movw	r14, r24
		//lcd_write_string("Duty Cycle =");
		//LCD_go_to_xy(1,11);
		/********************************************/


		LCD_vidWriteString("Duty Cycle =");
 4ae:	80 e6       	ldi	r24, 0x60	; 96
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_vidWriteString>
		LCD_vidGotoXY(1,11);
 4b6:	6b e0       	ldi	r22, 0x0B	; 11
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 93 01 	call	0x326	; 0x326 <LCD_vidGotoXY>
		LCD_u8WriteINT(u16Duty_cycle);
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_u8WriteINT>
		/**************************************************/
		//LCD_WriteNumber(u16Duty_cycle);
		//lcd_write_string("%");
		/***************************************/

		LCD_vidWriteChar('%');
 4c4:	85 e2       	ldi	r24, 0x25	; 37
 4c6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_vidWriteChar>
		LCD_vidGotoXY(2,0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 93 01 	call	0x326	; 0x326 <LCD_vidGotoXY>
		//LCD_WriteNumber(u16Period);
		/**************************************************/
		//LCD_vidWriteString("Period =");
		//LCD_u8WriteINT(u16Period);
		/*****************************************************/
		LCD_vidWriteString("Freq = ");
 4d2:	8d e6       	ldi	r24, 0x6D	; 109
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_vidWriteString>
		LCD_u8WriteINT(u16Freq);
 4da:	c6 01       	movw	r24, r12
 4dc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_u8WriteINT>
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <main+0xca>

000004e2 <__vector_6>:
	return 0;
}


void __vector_6(void)
{
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
	//read registers not time
	if(u8flag == 0)
 4f4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 4f8:	81 11       	cpse	r24, r1
 4fa:	1c c0       	rjmp	.+56     	; 0x534 <__vector_6+0x52>
	{
		u16temp1 |= (ICR1H<<8);
 4fc:	87 b5       	in	r24, 0x27	; 39
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	98 2f       	mov	r25, r24
 502:	88 27       	eor	r24, r24
 504:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <u16temp1>
 508:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <u16temp1+0x1>
 50c:	82 2b       	or	r24, r18
 50e:	93 2b       	or	r25, r19
 510:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <u16temp1+0x1>
 514:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <u16temp1>
		u16temp1 |= ICR1L;
 518:	26 b5       	in	r18, 0x26	; 38
 51a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <u16temp1>
 51e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <u16temp1+0x1>
 522:	82 2b       	or	r24, r18
 524:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <u16temp1+0x1>
 528:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <u16temp1>
		u8flag = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 532:	42 c0       	rjmp	.+132    	; 0x5b8 <__vector_6+0xd6>
	}
	else if (u8flag == 1)
 534:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	f9 f4       	brne	.+62     	; 0x57a <__vector_6+0x98>
	{
		SET_BIT(TCCR1B,ICES1);
 53c:	8e b5       	in	r24, 0x2e	; 46
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	8e bd       	out	0x2e, r24	; 46
		u16temp2 |= (ICR1H<<8);
 542:	87 b5       	in	r24, 0x27	; 39
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	98 2f       	mov	r25, r24
 548:	88 27       	eor	r24, r24
 54a:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <u16temp2>
 54e:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <u16temp2+0x1>
 552:	82 2b       	or	r24, r18
 554:	93 2b       	or	r25, r19
 556:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <u16temp2+0x1>
 55a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u16temp2>
		u16temp2 |= ICR1L;
 55e:	26 b5       	in	r18, 0x26	; 38
 560:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16temp2>
 564:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u16temp2+0x1>
 568:	82 2b       	or	r24, r18
 56a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <u16temp2+0x1>
 56e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u16temp2>
		u8flag = 2;
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 578:	1f c0       	rjmp	.+62     	; 0x5b8 <__vector_6+0xd6>
	}
	else if (u8flag == 2)
 57a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	d9 f4       	brne	.+54     	; 0x5b8 <__vector_6+0xd6>
	{
		u16temp3 |= (ICR1H<<8);
 582:	87 b5       	in	r24, 0x27	; 39
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	98 2f       	mov	r25, r24
 588:	88 27       	eor	r24, r24
 58a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <u16temp3>
 58e:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <u16temp3+0x1>
 592:	82 2b       	or	r24, r18
 594:	93 2b       	or	r25, r19
 596:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <u16temp3+0x1>
 59a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u16temp3>
		u16temp3 |= ICR1L;
 59e:	26 b5       	in	r18, 0x26	; 38
 5a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <u16temp3>
 5a4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <u16temp3+0x1>
 5a8:	82 2b       	or	r24, r18
 5aa:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <u16temp3+0x1>
 5ae:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u16temp3>
		u8flag = 3;
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	}
	else{}
	
	
}
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <TIMER0_void_Init>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 5ca:	83 b7       	in	r24, 0x33	; 51
 5cc:	80 64       	ori	r24, 0x40	; 64
 5ce:	83 bf       	out	0x33, r24	; 51
 5d0:	83 b7       	in	r24, 0x33	; 51
 5d2:	88 60       	ori	r24, 0x08	; 8
 5d4:	83 bf       	out	0x33, r24	; 51
 5d6:	83 b7       	in	r24, 0x33	; 51
 5d8:	8e 7f       	andi	r24, 0xFE	; 254
 5da:	83 bf       	out	0x33, r24	; 51
 5dc:	83 b7       	in	r24, 0x33	; 51
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	83 bf       	out	0x33, r24	; 51
 5e2:	83 b7       	in	r24, 0x33	; 51
 5e4:	8b 7f       	andi	r24, 0xFB	; 251
 5e6:	83 bf       	out	0x33, r24	; 51
 5e8:	83 b7       	in	r24, 0x33	; 51
 5ea:	8f 7e       	andi	r24, 0xEF	; 239
 5ec:	83 bf       	out	0x33, r24	; 51
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	80 62       	ori	r24, 0x20	; 32
 5f2:	83 bf       	out	0x33, r24	; 51
 5f4:	89 b7       	in	r24, 0x39	; 57
 5f6:	8e 7f       	andi	r24, 0xFE	; 254
 5f8:	89 bf       	out	0x39, r24	; 57
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	8d 7f       	andi	r24, 0xFD	; 253
 5fe:	89 bf       	out	0x39, r24	; 57
 600:	88 b7       	in	r24, 0x38	; 56
 602:	81 60       	ori	r24, 0x01	; 1
 604:	88 bf       	out	0x38, r24	; 56
 606:	88 b7       	in	r24, 0x38	; 56
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	88 bf       	out	0x38, r24	; 56
 60c:	12 be       	out	0x32, r1	; 50
 60e:	1c be       	out	0x3c, r1	; 60
 610:	08 95       	ret

00000612 <TIMER0_void_SetCompareVal>:
 612:	8c bf       	out	0x3c, r24	; 60
 614:	08 95       	ret

00000616 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 638:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <TIMER0_OV_CallBack>
 63c:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <TIMER0_OV_CallBack+0x1>
 640:	09 95       	icall
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 686:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <TIMER0_CTC_CallBack>
 68a:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <TIMER0_CTC_CallBack+0x1>
 68e:	09 95       	icall
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__divsf3>:
 6b2:	0e 94 6d 03 	call	0x6da	; 0x6da <__divsf3x>
 6b6:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_round>
 6ba:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_pscB>
 6be:	58 f0       	brcs	.+22     	; 0x6d6 <__divsf3+0x24>
 6c0:	0e 94 40 04 	call	0x880	; 0x880 <__fp_pscA>
 6c4:	40 f0       	brcs	.+16     	; 0x6d6 <__divsf3+0x24>
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <__divsf3+0x20>
 6c8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ca:	29 f0       	breq	.+10     	; 0x6d6 <__divsf3+0x24>
 6cc:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 6d0:	51 11       	cpse	r21, r1
 6d2:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_szero>
 6d6:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>

000006da <__divsf3x>:
 6da:	0e 94 5f 04 	call	0x8be	; 0x8be <__fp_split3>
 6de:	68 f3       	brcs	.-38     	; 0x6ba <__divsf3+0x8>

000006e0 <__divsf3_pse>:
 6e0:	99 23       	and	r25, r25
 6e2:	b1 f3       	breq	.-20     	; 0x6d0 <__divsf3+0x1e>
 6e4:	55 23       	and	r21, r21
 6e6:	91 f3       	breq	.-28     	; 0x6cc <__divsf3+0x1a>
 6e8:	95 1b       	sub	r25, r21
 6ea:	55 0b       	sbc	r21, r21
 6ec:	bb 27       	eor	r27, r27
 6ee:	aa 27       	eor	r26, r26
 6f0:	62 17       	cp	r22, r18
 6f2:	73 07       	cpc	r23, r19
 6f4:	84 07       	cpc	r24, r20
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__divsf3_pse+0x26>
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	5f 4f       	sbci	r21, 0xFF	; 255
 6fc:	22 0f       	add	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	44 1f       	adc	r20, r20
 702:	aa 1f       	adc	r26, r26
 704:	a9 f3       	breq	.-22     	; 0x6f0 <__divsf3_pse+0x10>
 706:	35 d0       	rcall	.+106    	; 0x772 <__divsf3_pse+0x92>
 708:	0e 2e       	mov	r0, r30
 70a:	3a f0       	brmi	.+14     	; 0x71a <__divsf3_pse+0x3a>
 70c:	e0 e8       	ldi	r30, 0x80	; 128
 70e:	32 d0       	rcall	.+100    	; 0x774 <__divsf3_pse+0x94>
 710:	91 50       	subi	r25, 0x01	; 1
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	e6 95       	lsr	r30
 716:	00 1c       	adc	r0, r0
 718:	ca f7       	brpl	.-14     	; 0x70c <__divsf3_pse+0x2c>
 71a:	2b d0       	rcall	.+86     	; 0x772 <__divsf3_pse+0x92>
 71c:	fe 2f       	mov	r31, r30
 71e:	29 d0       	rcall	.+82     	; 0x772 <__divsf3_pse+0x92>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	bb 1f       	adc	r27, r27
 728:	26 17       	cp	r18, r22
 72a:	37 07       	cpc	r19, r23
 72c:	48 07       	cpc	r20, r24
 72e:	ab 07       	cpc	r26, r27
 730:	b0 e8       	ldi	r27, 0x80	; 128
 732:	09 f0       	breq	.+2      	; 0x736 <__divsf3_pse+0x56>
 734:	bb 0b       	sbc	r27, r27
 736:	80 2d       	mov	r24, r0
 738:	bf 01       	movw	r22, r30
 73a:	ff 27       	eor	r31, r31
 73c:	93 58       	subi	r25, 0x83	; 131
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	3a f0       	brmi	.+14     	; 0x750 <__divsf3_pse+0x70>
 742:	9e 3f       	cpi	r25, 0xFE	; 254
 744:	51 05       	cpc	r21, r1
 746:	78 f0       	brcs	.+30     	; 0x766 <__divsf3_pse+0x86>
 748:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 74c:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_szero>
 750:	5f 3f       	cpi	r21, 0xFF	; 255
 752:	e4 f3       	brlt	.-8      	; 0x74c <__divsf3_pse+0x6c>
 754:	98 3e       	cpi	r25, 0xE8	; 232
 756:	d4 f3       	brlt	.-12     	; 0x74c <__divsf3_pse+0x6c>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	c9 f7       	brne	.-14     	; 0x758 <__divsf3_pse+0x78>
 766:	88 0f       	add	r24, r24
 768:	91 1d       	adc	r25, r1
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret
 772:	e1 e0       	ldi	r30, 0x01	; 1
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	bb 1f       	adc	r27, r27
 77c:	62 17       	cp	r22, r18
 77e:	73 07       	cpc	r23, r19
 780:	84 07       	cpc	r24, r20
 782:	ba 07       	cpc	r27, r26
 784:	20 f0       	brcs	.+8      	; 0x78e <__divsf3_pse+0xae>
 786:	62 1b       	sub	r22, r18
 788:	73 0b       	sbc	r23, r19
 78a:	84 0b       	sbc	r24, r20
 78c:	ba 0b       	sbc	r27, r26
 78e:	ee 1f       	adc	r30, r30
 790:	88 f7       	brcc	.-30     	; 0x774 <__divsf3_pse+0x94>
 792:	e0 95       	com	r30
 794:	08 95       	ret

00000796 <__fixunssfsi>:
 796:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_splitA>
 79a:	88 f0       	brcs	.+34     	; 0x7be <__fixunssfsi+0x28>
 79c:	9f 57       	subi	r25, 0x7F	; 127
 79e:	98 f0       	brcs	.+38     	; 0x7c6 <__fixunssfsi+0x30>
 7a0:	b9 2f       	mov	r27, r25
 7a2:	99 27       	eor	r25, r25
 7a4:	b7 51       	subi	r27, 0x17	; 23
 7a6:	b0 f0       	brcs	.+44     	; 0x7d4 <__fixunssfsi+0x3e>
 7a8:	e1 f0       	breq	.+56     	; 0x7e2 <__fixunssfsi+0x4c>
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	1a f0       	brmi	.+6      	; 0x7ba <__fixunssfsi+0x24>
 7b4:	ba 95       	dec	r27
 7b6:	c9 f7       	brne	.-14     	; 0x7aa <__fixunssfsi+0x14>
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <__fixunssfsi+0x4c>
 7ba:	b1 30       	cpi	r27, 0x01	; 1
 7bc:	91 f0       	breq	.+36     	; 0x7e2 <__fixunssfsi+0x4c>
 7be:	0e 94 81 04 	call	0x902	; 0x902 <__fp_zero>
 7c2:	b1 e0       	ldi	r27, 0x01	; 1
 7c4:	08 95       	ret
 7c6:	0c 94 81 04 	jmp	0x902	; 0x902 <__fp_zero>
 7ca:	67 2f       	mov	r22, r23
 7cc:	78 2f       	mov	r23, r24
 7ce:	88 27       	eor	r24, r24
 7d0:	b8 5f       	subi	r27, 0xF8	; 248
 7d2:	39 f0       	breq	.+14     	; 0x7e2 <__fixunssfsi+0x4c>
 7d4:	b9 3f       	cpi	r27, 0xF9	; 249
 7d6:	cc f3       	brlt	.-14     	; 0x7ca <__fixunssfsi+0x34>
 7d8:	86 95       	lsr	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b3 95       	inc	r27
 7e0:	d9 f7       	brne	.-10     	; 0x7d8 <__fixunssfsi+0x42>
 7e2:	3e f4       	brtc	.+14     	; 0x7f2 <__fixunssfsi+0x5c>
 7e4:	90 95       	com	r25
 7e6:	80 95       	com	r24
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__floatunsisf>:
 7f4:	e8 94       	clt
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>

000007f8 <__floatsisf>:
 7f8:	97 fb       	bst	r25, 7
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	99 23       	and	r25, r25
 80c:	a9 f0       	breq	.+42     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 80e:	f9 2f       	mov	r31, r25
 810:	96 e9       	ldi	r25, 0x96	; 150
 812:	bb 27       	eor	r27, r27
 814:	93 95       	inc	r25
 816:	f6 95       	lsr	r31
 818:	87 95       	ror	r24
 81a:	77 95       	ror	r23
 81c:	67 95       	ror	r22
 81e:	b7 95       	ror	r27
 820:	f1 11       	cpse	r31, r1
 822:	f8 cf       	rjmp	.-16     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 824:	fa f4       	brpl	.+62     	; 0x864 <__stack+0x5>
 826:	bb 0f       	add	r27, r27
 828:	11 f4       	brne	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82a:	60 ff       	sbrs	r22, 0
 82c:	1b c0       	rjmp	.+54     	; 0x864 <__stack+0x5>
 82e:	6f 5f       	subi	r22, 0xFF	; 255
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	16 c0       	rjmp	.+44     	; 0x864 <__stack+0x5>
 838:	88 23       	and	r24, r24
 83a:	11 f0       	breq	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	96 e9       	ldi	r25, 0x96	; 150
 83e:	11 c0       	rjmp	.+34     	; 0x862 <__stack+0x3>
 840:	77 23       	and	r23, r23
 842:	21 f0       	breq	.+8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 844:	9e e8       	ldi	r25, 0x8E	; 142
 846:	87 2f       	mov	r24, r23
 848:	76 2f       	mov	r23, r22
 84a:	05 c0       	rjmp	.+10     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84c:	66 23       	and	r22, r22
 84e:	71 f0       	breq	.+28     	; 0x86c <__stack+0xd>
 850:	96 e8       	ldi	r25, 0x86	; 134
 852:	86 2f       	mov	r24, r22
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	2a f0       	brmi	.+10     	; 0x864 <__stack+0x5>
 85a:	9a 95       	dec	r25
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	da f7       	brpl	.-10     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 864:	88 0f       	add	r24, r24
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__fp_inf>:
 86e:	97 f9       	bld	r25, 7
 870:	9f 67       	ori	r25, 0x7F	; 127
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	08 95       	ret

0000087a <__fp_nan>:
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	80 ec       	ldi	r24, 0xC0	; 192
 87e:	08 95       	ret

00000880 <__fp_pscA>:
 880:	00 24       	eor	r0, r0
 882:	0a 94       	dec	r0
 884:	16 16       	cp	r1, r22
 886:	17 06       	cpc	r1, r23
 888:	18 06       	cpc	r1, r24
 88a:	09 06       	cpc	r0, r25
 88c:	08 95       	ret

0000088e <__fp_pscB>:
 88e:	00 24       	eor	r0, r0
 890:	0a 94       	dec	r0
 892:	12 16       	cp	r1, r18
 894:	13 06       	cpc	r1, r19
 896:	14 06       	cpc	r1, r20
 898:	05 06       	cpc	r0, r21
 89a:	08 95       	ret

0000089c <__fp_round>:
 89c:	09 2e       	mov	r0, r25
 89e:	03 94       	inc	r0
 8a0:	00 0c       	add	r0, r0
 8a2:	11 f4       	brne	.+4      	; 0x8a8 <__fp_round+0xc>
 8a4:	88 23       	and	r24, r24
 8a6:	52 f0       	brmi	.+20     	; 0x8bc <__fp_round+0x20>
 8a8:	bb 0f       	add	r27, r27
 8aa:	40 f4       	brcc	.+16     	; 0x8bc <__fp_round+0x20>
 8ac:	bf 2b       	or	r27, r31
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0x18>
 8b0:	60 ff       	sbrs	r22, 0
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__fp_round+0x20>
 8b4:	6f 5f       	subi	r22, 0xFF	; 255
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__fp_split3>:
 8be:	57 fd       	sbrc	r21, 7
 8c0:	90 58       	subi	r25, 0x80	; 128
 8c2:	44 0f       	add	r20, r20
 8c4:	55 1f       	adc	r21, r21
 8c6:	59 f0       	breq	.+22     	; 0x8de <__fp_splitA+0x10>
 8c8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__fp_splitA+0x1a>
 8cc:	47 95       	ror	r20

000008ce <__fp_splitA>:
 8ce:	88 0f       	add	r24, r24
 8d0:	97 fb       	bst	r25, 7
 8d2:	99 1f       	adc	r25, r25
 8d4:	61 f0       	breq	.+24     	; 0x8ee <__fp_splitA+0x20>
 8d6:	9f 3f       	cpi	r25, 0xFF	; 255
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <__fp_splitA+0x2a>
 8da:	87 95       	ror	r24
 8dc:	08 95       	ret
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	55 1f       	adc	r21, r21
 8e6:	f2 cf       	rjmp	.-28     	; 0x8cc <__fp_split3+0xe>
 8e8:	46 95       	lsr	r20
 8ea:	f1 df       	rcall	.-30     	; 0x8ce <__fp_splitA>
 8ec:	08 c0       	rjmp	.+16     	; 0x8fe <__fp_splitA+0x30>
 8ee:	16 16       	cp	r1, r22
 8f0:	17 06       	cpc	r1, r23
 8f2:	18 06       	cpc	r1, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	f1 cf       	rjmp	.-30     	; 0x8da <__fp_splitA+0xc>
 8f8:	86 95       	lsr	r24
 8fa:	71 05       	cpc	r23, r1
 8fc:	61 05       	cpc	r22, r1
 8fe:	08 94       	sec
 900:	08 95       	ret

00000902 <__fp_zero>:
 902:	e8 94       	clt

00000904 <__fp_szero>:
 904:	bb 27       	eor	r27, r27
 906:	66 27       	eor	r22, r22
 908:	77 27       	eor	r23, r23
 90a:	cb 01       	movw	r24, r22
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__mulsf3>:
 910:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3x>
 914:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_round>
 918:	0e 94 40 04 	call	0x880	; 0x880 <__fp_pscA>
 91c:	38 f0       	brcs	.+14     	; 0x92c <__mulsf3+0x1c>
 91e:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_pscB>
 922:	20 f0       	brcs	.+8      	; 0x92c <__mulsf3+0x1c>
 924:	95 23       	and	r25, r21
 926:	11 f0       	breq	.+4      	; 0x92c <__mulsf3+0x1c>
 928:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 92c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>
 930:	11 24       	eor	r1, r1
 932:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_szero>

00000936 <__mulsf3x>:
 936:	0e 94 5f 04 	call	0x8be	; 0x8be <__fp_split3>
 93a:	70 f3       	brcs	.-36     	; 0x918 <__mulsf3+0x8>

0000093c <__mulsf3_pse>:
 93c:	95 9f       	mul	r25, r21
 93e:	c1 f3       	breq	.-16     	; 0x930 <__mulsf3+0x20>
 940:	95 0f       	add	r25, r21
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	55 1f       	adc	r21, r21
 946:	62 9f       	mul	r22, r18
 948:	f0 01       	movw	r30, r0
 94a:	72 9f       	mul	r23, r18
 94c:	bb 27       	eor	r27, r27
 94e:	f0 0d       	add	r31, r0
 950:	b1 1d       	adc	r27, r1
 952:	63 9f       	mul	r22, r19
 954:	aa 27       	eor	r26, r26
 956:	f0 0d       	add	r31, r0
 958:	b1 1d       	adc	r27, r1
 95a:	aa 1f       	adc	r26, r26
 95c:	64 9f       	mul	r22, r20
 95e:	66 27       	eor	r22, r22
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	66 1f       	adc	r22, r22
 966:	82 9f       	mul	r24, r18
 968:	22 27       	eor	r18, r18
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	62 1f       	adc	r22, r18
 970:	73 9f       	mul	r23, r19
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	62 1f       	adc	r22, r18
 978:	83 9f       	mul	r24, r19
 97a:	a0 0d       	add	r26, r0
 97c:	61 1d       	adc	r22, r1
 97e:	22 1f       	adc	r18, r18
 980:	74 9f       	mul	r23, r20
 982:	33 27       	eor	r19, r19
 984:	a0 0d       	add	r26, r0
 986:	61 1d       	adc	r22, r1
 988:	23 1f       	adc	r18, r19
 98a:	84 9f       	mul	r24, r20
 98c:	60 0d       	add	r22, r0
 98e:	21 1d       	adc	r18, r1
 990:	82 2f       	mov	r24, r18
 992:	76 2f       	mov	r23, r22
 994:	6a 2f       	mov	r22, r26
 996:	11 24       	eor	r1, r1
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	9a f0       	brmi	.+38     	; 0x9c4 <__mulsf3_pse+0x88>
 99e:	f1 f0       	breq	.+60     	; 0x9dc <__mulsf3_pse+0xa0>
 9a0:	88 23       	and	r24, r24
 9a2:	4a f0       	brmi	.+18     	; 0x9b6 <__mulsf3_pse+0x7a>
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	bb 1f       	adc	r27, r27
 9aa:	66 1f       	adc	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	91 50       	subi	r25, 0x01	; 1
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	a9 f7       	brne	.-22     	; 0x9a0 <__mulsf3_pse+0x64>
 9b6:	9e 3f       	cpi	r25, 0xFE	; 254
 9b8:	51 05       	cpc	r21, r1
 9ba:	80 f0       	brcs	.+32     	; 0x9dc <__mulsf3_pse+0xa0>
 9bc:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 9c0:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_szero>
 9c4:	5f 3f       	cpi	r21, 0xFF	; 255
 9c6:	e4 f3       	brlt	.-8      	; 0x9c0 <__mulsf3_pse+0x84>
 9c8:	98 3e       	cpi	r25, 0xE8	; 232
 9ca:	d4 f3       	brlt	.-12     	; 0x9c0 <__mulsf3_pse+0x84>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f7 95       	ror	r31
 9d6:	e7 95       	ror	r30
 9d8:	9f 5f       	subi	r25, 0xFF	; 255
 9da:	c1 f7       	brne	.-16     	; 0x9cc <__mulsf3_pse+0x90>
 9dc:	fe 2b       	or	r31, r30
 9de:	88 0f       	add	r24, r24
 9e0:	91 1d       	adc	r25, r1
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <__udivmodhi4>:
 9ea:	aa 1b       	sub	r26, r26
 9ec:	bb 1b       	sub	r27, r27
 9ee:	51 e1       	ldi	r21, 0x11	; 17
 9f0:	07 c0       	rjmp	.+14     	; 0xa00 <__udivmodhi4_ep>

000009f2 <__udivmodhi4_loop>:
 9f2:	aa 1f       	adc	r26, r26
 9f4:	bb 1f       	adc	r27, r27
 9f6:	a6 17       	cp	r26, r22
 9f8:	b7 07       	cpc	r27, r23
 9fa:	10 f0       	brcs	.+4      	; 0xa00 <__udivmodhi4_ep>
 9fc:	a6 1b       	sub	r26, r22
 9fe:	b7 0b       	sbc	r27, r23

00000a00 <__udivmodhi4_ep>:
 a00:	88 1f       	adc	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	5a 95       	dec	r21
 a06:	a9 f7       	brne	.-22     	; 0x9f2 <__udivmodhi4_loop>
 a08:	80 95       	com	r24
 a0a:	90 95       	com	r25
 a0c:	bc 01       	movw	r22, r24
 a0e:	cd 01       	movw	r24, r26
 a10:	08 95       	ret

00000a12 <__umulhisi3>:
 a12:	a2 9f       	mul	r26, r18
 a14:	b0 01       	movw	r22, r0
 a16:	b3 9f       	mul	r27, r19
 a18:	c0 01       	movw	r24, r0
 a1a:	a3 9f       	mul	r26, r19
 a1c:	70 0d       	add	r23, r0
 a1e:	81 1d       	adc	r24, r1
 a20:	11 24       	eor	r1, r1
 a22:	91 1d       	adc	r25, r1
 a24:	b2 9f       	mul	r27, r18
 a26:	70 0d       	add	r23, r0
 a28:	81 1d       	adc	r24, r1
 a2a:	11 24       	eor	r1, r1
 a2c:	91 1d       	adc	r25, r1
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
