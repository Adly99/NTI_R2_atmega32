
NTI_TEST_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000006d4  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f2  008000a0  008000a0  000007a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1a  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4e  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001039  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00004650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4e  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d83  00000000  00000000  00005682  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00006405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_1>
   8:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_10>
  2c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_15>
  40:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enablePulse>:
	while (*str != '\0')
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <enablePulse+0xc>
  a2:	00 00       	nop
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	9f e1       	ldi	r25, 0x1F	; 31
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <enablePulse+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <enablePulse+0x26>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <lcd_vidSendCmd>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  ca:	c4 fb       	bst	r28, 4
  cc:	44 27       	eor	r20, r20
  ce:	40 f9       	bld	r20, 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  d8:	c5 fb       	bst	r28, 5
  da:	44 27       	eor	r20, r20
  dc:	40 f9       	bld	r20, 0
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  e6:	c6 fb       	bst	r28, 6
  e8:	44 27       	eor	r20, r20
  ea:	40 f9       	bld	r20, 0
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
  f4:	4c 2f       	mov	r20, r28
  f6:	44 1f       	adc	r20, r20
  f8:	44 27       	eor	r20, r20
  fa:	44 1f       	adc	r20, r20
  fc:	65 e0       	ldi	r22, 0x05	; 5
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 104:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
 108:	4c 2f       	mov	r20, r28
 10a:	41 70       	andi	r20, 0x01	; 1
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 114:	c1 fb       	bst	r28, 1
 116:	44 27       	eor	r20, r20
 118:	40 f9       	bld	r20, 0
 11a:	63 e0       	ldi	r22, 0x03	; 3
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 122:	c2 fb       	bst	r28, 2
 124:	44 27       	eor	r20, r20
 126:	40 f9       	bld	r20, 0
 128:	64 e0       	ldi	r22, 0x04	; 4
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 130:	c3 fb       	bst	r28, 3
 132:	44 27       	eor	r20, r20
 134:	40 f9       	bld	r20, 0
 136:	65 e0       	ldi	r22, 0x05	; 5
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 13e:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <lcd_vidSendData>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 154:	c4 fb       	bst	r28, 4
 156:	44 27       	eor	r20, r20
 158:	40 f9       	bld	r20, 0
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 162:	c5 fb       	bst	r28, 5
 164:	44 27       	eor	r20, r20
 166:	40 f9       	bld	r20, 0
 168:	63 e0       	ldi	r22, 0x03	; 3
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 170:	c6 fb       	bst	r28, 6
 172:	44 27       	eor	r20, r20
 174:	40 f9       	bld	r20, 0
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 17e:	4c 2f       	mov	r20, r28
 180:	44 1f       	adc	r20, r20
 182:	44 27       	eor	r20, r20
 184:	44 1f       	adc	r20, r20
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 18e:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
 192:	4c 2f       	mov	r20, r28
 194:	41 70       	andi	r20, 0x01	; 1
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 19e:	c1 fb       	bst	r28, 1
 1a0:	44 27       	eor	r20, r20
 1a2:	40 f9       	bld	r20, 0
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 1ac:	c2 fb       	bst	r28, 2
 1ae:	44 27       	eor	r20, r20
 1b0:	40 f9       	bld	r20, 0
 1b2:	64 e0       	ldi	r22, 0x04	; 4
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 1ba:	c3 fb       	bst	r28, 3
 1bc:	44 27       	eor	r20, r20
 1be:	40 f9       	bld	r20, 0
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 1c 02 	call	0x438	; 0x438 <dio_vidWriteChannel>
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <lcd_vidGotoRowColumn>:
 1d0:	88 23       	and	r24, r24
 1d2:	19 f0       	breq	.+6      	; 0x1da <lcd_vidGotoRowColumn+0xa>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <lcd_vidGotoRowColumn+0x14>
 1d8:	08 95       	ret
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	86 0f       	add	r24, r22
 1de:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
 1e2:	08 95       	ret
 1e4:	84 e9       	ldi	r24, 0x94	; 148
 1e6:	86 0f       	add	r24, r22
 1e8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
 1ec:	08 95       	ret

000001ee <lcd_vidDisplyChar>:
 1ee:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_vidSendData>
 1f2:	08 95       	ret

000001f4 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <lcd_vidCustomWrite+0x46>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 200:	0d 2f       	mov	r16, r29
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	c8 01       	movw	r24, r16
 206:	08 96       	adiw	r24, 0x08	; 8
 208:	88 0f       	add	r24, r24
 20a:	88 0f       	add	r24, r24
 20c:	88 0f       	add	r24, r24
 20e:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	0f c0       	rjmp	.+30     	; 0x234 <lcd_vidCustomWrite+0x40>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
 216:	f8 01       	movw	r30, r16
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	e0 5a       	subi	r30, 0xA0	; 160
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	ec 0f       	add	r30, r28
 22a:	f1 1d       	adc	r31, r1
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 232:	cf 5f       	subi	r28, 0xFF	; 255
 234:	c8 30       	cpi	r28, 0x08	; 8
 236:	78 f3       	brcs	.-34     	; 0x216 <lcd_vidCustomWrite+0x22>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 238:	df 5f       	subi	r29, 0xFF	; 255
 23a:	d8 30       	cpi	r29, 0x08	; 8
 23c:	08 f3       	brcs	.-62     	; 0x200 <lcd_vidCustomWrite+0xc>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <lcd_vidInit>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	65 e0       	ldi	r22, 0x05	; 5
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
// 	dio_vidWriteChannel(LCD_EN_PORT,LCD_EN_CHANNEL,STD_LOW);

	lcd_vidSendCmd(0x02);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	8f e1       	ldi	r24, 0x1F	; 31
 28c:	9e e4       	ldi	r25, 0x4E	; 78
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_vidInit+0x46>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_vidInit+0x4c>
 294:	00 00       	nop
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f e8       	ldi	r24, 0x8F	; 143
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_vidInit+0x58>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_vidInit+0x5e>
 2a6:	00 00       	nop
	_delay_us(100);
	lcd_vidSendCmd(lcd_Home);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	8f e5       	ldi	r24, 0x5F	; 95
 2b0:	9a ee       	ldi	r25, 0xEA	; 234
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_vidInit+0x6a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_vidInit+0x70>
 2b8:	00 00       	nop
	_delay_ms(15);
	lcd_vidSendCmd(lcd_FunctionSet4bit);
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_vidInit+0x7c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_vidInit+0x82>
 2ca:	00 00       	nop
	_delay_ms(1);
	lcd_vidSendCmd(lcd_DisplayOn );
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_vidInit+0x8e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_vidInit+0x94>
 2dc:	00 00       	nop
	_delay_ms(1);
	lcd_vidSendCmd(lcd_Clear);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_vidSendCmd>
 2e4:	8f e9       	ldi	r24, 0x9F	; 159
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_vidInit+0xa0>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_vidInit+0xa6>
 2ee:	00 00       	nop
// 	_delay_us(100);
// lcd_vidSendCmd(0x03); 
// 	lcd_vidSendCmd(0x02);
// 	lcd_vidSendCmd(_LCD_4BIT_MODE); // to initialize LCD in 4-bit mode.
/*	lcd_vidSendCmd(0x0E);*/
	lcd_vidCustomWrite();
 2f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_vidCustomWrite>
	lcd_vidGotoRowColumn(0, 0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_vidGotoRowColumn>
 2fc:	08 95       	ret

000002fe <main>:

int main(void)
 {	
 

	 SPI_SLAVE_init();
 2fe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SPI_SLAVE_init>

	lcd_vidInit();
 302:	0e 94 24 01 	call	0x248	; 0x248 <lcd_vidInit>
	u8 name = 0;

    while (1) 
    {	
		name = SPI_SLAVE_RECIEVE_BYTE();
 306:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_SLAVE_RECIEVE_BYTE>
		lcd_vidDisplyChar(name);
 30a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_vidDisplyChar>
 30e:	fb cf       	rjmp	.-10     	; 0x306 <main+0x8>

00000310 <__vector_16>:
// }

void __vector_16(void) __attribute__(( signal , used ));

void __vector_16(void)
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	
	y();
 332:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <y>
 336:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <y+0x1>
 33a:	09 95       	icall

}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	01 f1       	breq	.+64     	; 0x3a2 <dio_vidConfigChannel+0x44>
 362:	30 f0       	brcs	.+12     	; 0x370 <dio_vidConfigChannel+0x12>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	b1 f1       	breq	.+108    	; 0x3d4 <dio_vidConfigChannel+0x76>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	09 f4       	brne	.+2      	; 0x36e <dio_vidConfigChannel+0x10>
 36c:	4c c0       	rjmp	.+152    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 36e:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	59 f4       	brne	.+22     	; 0x38a <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 374:	2a b3       	in	r18, 0x1a	; 26
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <dio_vidConfigChannel+0x22>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <dio_vidConfigChannel+0x1e>
 384:	82 2b       	or	r24, r18
 386:	8a bb       	out	0x1a, r24	; 26
 388:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 38a:	2a b3       	in	r18, 0x1a	; 26
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <dio_vidConfigChannel+0x38>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <dio_vidConfigChannel+0x34>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	8a bb       	out	0x1a, r24	; 26
 3a0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 3a2:	41 30       	cpi	r20, 0x01	; 1
 3a4:	59 f4       	brne	.+22     	; 0x3bc <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 3a6:	27 b3       	in	r18, 0x17	; 23
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <dio_vidConfigChannel+0x54>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <dio_vidConfigChannel+0x50>
 3b6:	82 2b       	or	r24, r18
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 3bc:	27 b3       	in	r18, 0x17	; 23
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dio_vidConfigChannel+0x6a>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <dio_vidConfigChannel+0x66>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	87 bb       	out	0x17, r24	; 23
 3d2:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 3d4:	41 30       	cpi	r20, 0x01	; 1
 3d6:	59 f4       	brne	.+22     	; 0x3ee <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 3d8:	24 b3       	in	r18, 0x14	; 20
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <dio_vidConfigChannel+0x86>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <dio_vidConfigChannel+0x82>
 3e8:	82 2b       	or	r24, r18
 3ea:	84 bb       	out	0x14, r24	; 20
 3ec:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 3ee:	24 b3       	in	r18, 0x14	; 20
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <dio_vidConfigChannel+0x9c>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <dio_vidConfigChannel+0x98>
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	84 bb       	out	0x14, r24	; 20
 404:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 406:	41 30       	cpi	r20, 0x01	; 1
 408:	59 f4       	brne	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 40a:	21 b3       	in	r18, 0x11	; 17
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	82 2b       	or	r24, r18
 41c:	81 bb       	out	0x11, r24	; 17
 41e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 420:	21 b3       	in	r18, 0x11	; 17
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	81 bb       	out	0x11, r24	; 17
 436:	08 95       	ret

00000438 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	01 f1       	breq	.+64     	; 0x47c <dio_vidWriteChannel+0x44>
 43c:	30 f0       	brcs	.+12     	; 0x44a <dio_vidWriteChannel+0x12>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	b1 f1       	breq	.+108    	; 0x4ae <dio_vidWriteChannel+0x76>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	09 f4       	brne	.+2      	; 0x448 <dio_vidWriteChannel+0x10>
 446:	4c c0       	rjmp	.+152    	; 0x4e0 <dio_vidWriteChannel+0xa8>
 448:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 44a:	41 11       	cpse	r20, r1
 44c:	0c c0       	rjmp	.+24     	; 0x466 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <dio_vidWriteChannel+0x22>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <dio_vidWriteChannel+0x1e>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	8b bb       	out	0x1b, r24	; 27
 464:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <dio_vidWriteChannel+0x3a>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <dio_vidWriteChannel+0x36>
 476:	82 2b       	or	r24, r18
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 47c:	41 11       	cpse	r20, r1
 47e:	0c c0       	rjmp	.+24     	; 0x498 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 480:	28 b3       	in	r18, 0x18	; 24
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <dio_vidWriteChannel+0x54>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <dio_vidWriteChannel+0x50>
 490:	80 95       	com	r24
 492:	82 23       	and	r24, r18
 494:	88 bb       	out	0x18, r24	; 24
 496:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <dio_vidWriteChannel+0x6c>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <dio_vidWriteChannel+0x68>
 4a8:	82 2b       	or	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
 4ac:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 4ae:	41 11       	cpse	r20, r1
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 4b2:	25 b3       	in	r18, 0x15	; 21
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <dio_vidWriteChannel+0x86>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <dio_vidWriteChannel+0x82>
 4c2:	80 95       	com	r24
 4c4:	82 23       	and	r24, r18
 4c6:	85 bb       	out	0x15, r24	; 21
 4c8:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <dio_vidWriteChannel+0x9e>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <dio_vidWriteChannel+0x9a>
 4da:	82 2b       	or	r24, r18
 4dc:	85 bb       	out	0x15, r24	; 21
 4de:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 4e0:	41 11       	cpse	r20, r1
 4e2:	0c c0       	rjmp	.+24     	; 0x4fc <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 4e4:	22 b3       	in	r18, 0x12	; 18
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <dio_vidWriteChannel+0xb8>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <dio_vidWriteChannel+0xb4>
 4f4:	80 95       	com	r24
 4f6:	82 23       	and	r24, r18
 4f8:	82 bb       	out	0x12, r24	; 18
 4fa:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 4fc:	22 b3       	in	r18, 0x12	; 18
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <dio_vidWriteChannel+0xd0>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <dio_vidWriteChannel+0xcc>
 50c:	82 2b       	or	r24, r18
 50e:	82 bb       	out	0x12, r24	; 18
 510:	08 95       	ret

00000512 <__vector_2>:
/** Linker Problem solved  INT1*/ 
void __vector_2(void) __attribute__(( signal , used ));


void __vector_2(void) 
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
	/*CLI();*/
	/*SREG |= 1<<7;*/
	x();
 534:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <x>
 538:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <x+0x1>
 53c:	09 95       	icall
	
}
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_1>:
/** Linker Problem solved INT0 */
void __vector_1(void) __attribute__(( signal , used ));


void __vector_1(void)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31
	/*CLI();*/
	/*SREG |= 1<<7;*/
	x();
 582:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <x>
 586:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <x+0x1>
 58a:	09 95       	icall
	
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <SPI_SLAVE_init>:
{	
	SPDR = byte ; // start transmission
	//WHILE TRANSMISSION
	while( CHECK_BIT(SPSR,SPIF) == 0 );
	return SPDR;
}
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	64 e0       	ldi	r22, 0x04	; 4
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	65 e0       	ldi	r22, 0x05	; 5
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	67 e0       	ldi	r22, 0x07	; 7
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	66 e0       	ldi	r22, 0x06	; 6
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 af 01 	call	0x35e	; 0x35e <dio_vidConfigChannel>
 5d6:	8d b1       	in	r24, 0x0d	; 13
 5d8:	80 64       	ori	r24, 0x40	; 64
 5da:	8d b9       	out	0x0d, r24	; 13
 5dc:	08 95       	ret

000005de <SPI_SLAVE_RECIEVE_BYTE>:

 
 u8 SPI_SLAVE_RECIEVE_BYTE(void)   /* SPI read data function */
{
 
	while( CHECK_BIT(SPSR,SPIF) == 0 );	/* Wait till reception complete */
 5de:	77 9b       	sbis	0x0e, 7	; 14
 5e0:	fe cf       	rjmp	.-4      	; 0x5de <SPI_SLAVE_RECIEVE_BYTE>
return SPDR;			/* Return received data */
 5e2:	8f b1       	in	r24, 0x0f	; 15
 }
 5e4:	08 95       	ret

000005e6 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 608:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <TIMER0_OV_CallBack>
 60c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <TIMER0_OV_CallBack+0x1>
 610:	09 95       	icall
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 656:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <TIMER0_CTC_CallBack>
 65a:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <TIMER0_CTC_CallBack+0x1>
 65e:	09 95       	icall
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_15>:
}
/*******************************************************************************/
void __vector_15(void) __attribute__(( signal , used ));

void __vector_15(void)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	
	byte_index++;
 694:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 698:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
 6a2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
	
	if( UART_TX_BUFFER[byte_index] != NULL)
 6a6:	fc 01       	movw	r30, r24
 6a8:	e6 55       	subi	r30, 0x56	; 86
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	80 81       	ld	r24, Z
 6ae:	88 23       	and	r24, r24
 6b0:	11 f0       	breq	.+4      	; 0x6b6 <__vector_15+0x34>
	{
		UART_UDR_REG = UART_TX_BUFFER[byte_index];
 6b2:	8c b9       	out	0x0c, r24	; 12
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <__vector_15+0x3c>
	}
	else
	{
		byte_index = 0 ;
 6b6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 6ba:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
	}
	

}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
